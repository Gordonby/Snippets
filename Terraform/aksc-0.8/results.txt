[0m[1mazurerm_resource_group.rg: Refreshing state... [id=/subscriptions/2d5bb2c8-8be8-4539-b48f-fbfd86852fa9/resourceGroups/az-k8s-c4px-rg][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create
[0m
Terraform will perform the following actions:

[1m  # azurerm_resource_group_template_deployment.aksc_deploy[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "azurerm_resource_group_template_deployment" "aksc_deploy" {
      [32m+[0m [0m[1m[0mdeployment_mode[0m[0m     = "Incremental"
      [32m+[0m [0m[1m[0mid[0m[0m                  = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m                = "AKS-C"
      [32m+[0m [0m[1m[0moutput_content[0m[0m      = (known after apply)
      [32m+[0m [0m[1m[0mparameters_content[0m[0m  = jsonencode(
            {
              [32m+[0m [0mAksDisableLocalAccounts      = {
                  [32m+[0m [0mvalue = true
                }
              [32m+[0m [0macrPushRolePrincipalId       = "04b07795-8ddb-461a-bbee-02f9e1bf7b46"
              [32m+[0m [0madminPrincipalId             = "04b07795-8ddb-461a-bbee-02f9e1bf7b46"
              [32m+[0m [0mappGWcount                   = {
                  [32m+[0m [0mvalue = 0
                }
              [32m+[0m [0mappGWmaxCount                = {
                  [32m+[0m [0mvalue = 10
                }
              [32m+[0m [0mappGWsku                     = {
                  [32m+[0m [0mvalue = "WAF_v2"
                }
              [32m+[0m [0mappgwKVIntegration           = {
                  [32m+[0m [0mvalue = true
                }
              [32m+[0m [0mauthorizedIPRanges           = {
                  [32m+[0m [0mvalue = [
                      [32m+[0m [0m"86.144.109.46/32",
                    ]
                }
              [32m+[0m [0mazureKeyvaultSecretsProvider = {
                  [32m+[0m [0mvalue = true
                }
              [32m+[0m [0mazurepolicy                  = {
                  [32m+[0m [0mvalue = "audit"
                }
              [32m+[0m [0mcreateKV                     = {
                  [32m+[0m [0mvalue = true
                }
              [32m+[0m [0mcustom_vnet                  = {
                  [32m+[0m [0mvalue = true
                }
              [32m+[0m [0menableAzureRBAC              = {
                  [32m+[0m [0mvalue = true
                }
              [32m+[0m [0menable_aad                   = {
                  [32m+[0m [0mvalue = true
                }
              [32m+[0m [0mingressApplicationGateway    = {
                  [32m+[0m [0mvalue = true
                }
              [32m+[0m [0mkvOfficerRolePrincipalId     = "04b07795-8ddb-461a-bbee-02f9e1bf7b46"
              [32m+[0m [0mnetworkPolicy                = {
                  [32m+[0m [0mvalue = "azure"
                }
              [32m+[0m [0momsagent                     = {
                  [32m+[0m [0mvalue = true
                }
              [32m+[0m [0mregistries_sku               = {
                  [32m+[0m [0mvalue = "Premium"
                }
              [32m+[0m [0mresourceName                 = {
                  [32m+[0m [0mvalue = "az-k8s-c4px"
                }
              [32m+[0m [0mretentionInDays              = {
                  [32m+[0m [0mvalue = 30
                }
              [32m+[0m [0mupgradeChannel               = {
                  [32m+[0m [0mvalue = "stable"
                }
            }
        )
      [32m+[0m [0m[1m[0mresource_group_name[0m[0m = "az-k8s-c4px-rg"
      [32m+[0m [0m[1m[0mtemplate_content[0m[0m    = jsonencode(
            {
              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
              [32m+[0m [0mcontentVersion = "1.0.0.0"
              [32m+[0m [0mmetadata       = {
                  [32m+[0m [0m_generator = {
                      [32m+[0m [0mname         = "bicep"
                      [32m+[0m [0mtemplateHash = "2586883189752085771"
                      [32m+[0m [0mversion      = "0.6.18.56646"
                    }
                }
              [32m+[0m [0moutputs        = {
                  [32m+[0m [0mApplicationGatewayName        = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[if(variables('deployAppGw'), variables('appgwName'), '')]"
                    }
                  [32m+[0m [0mCustomVnetId                  = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.vnetId.value, '')]"
                    }
                  [32m+[0m [0mCustomVnetPrivateLinkSubnetId = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.privateLinkSubnetId.value, '')]"
                    }
                  [32m+[0m [0mLogAnalyticsGuid              = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[if(variables('createLaw'), reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name')), '2021-06-01').customerId, '')]"
                    }
                  [32m+[0m [0mLogAnalyticsId                = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[if(variables('createLaw'), resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name')), '')]"
                    }
                  [32m+[0m [0mLogAnalyticsName              = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[if(variables('createLaw'), variables('aks_law_name'), '')]"
                    }
                  [32m+[0m [0maksClusterName                = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[format('aks-{0}', parameters('resourceName'))]"
                    }
                  [32m+[0m [0mcontainerRegistryId           = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[if(not(empty(parameters('registries_sku'))), resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), '')]"
                    }
                  [32m+[0m [0mcontainerRegistryName         = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[if(not(empty(parameters('registries_sku'))), variables('acrName'), '')]"
                    }
                  [32m+[0m [0mkeyVaultId                    = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[if(parameters('createKV'), resourceId('Microsoft.KeyVault/vaults', variables('akvName')), '')]"
                    }
                  [32m+[0m [0mkeyVaultName                  = {
                      [32m+[0m [0mtype  = "string"
                      [32m+[0m [0mvalue = "[if(parameters('createKV'), variables('akvName'), '')]"
                    }
                }
              [32m+[0m [0mparameters     = {
                  [32m+[0m [0mAksDiagCategories                  = {
                      [32m+[0m [0mdefaultValue = [
                          [32m+[0m [0m"cluster-autoscaler",
                          [32m+[0m [0m"kube-controller-manager",
                          [32m+[0m [0m"kube-audit-admin",
                          [32m+[0m [0m"guard",
                        ]
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Diagnostic categories to log"
                        }
                      [32m+[0m [0mtype         = "array"
                    }
                  [32m+[0m [0mAksDisableLocalAccounts            = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Disable local K8S accounts for AAD enabled clusters"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mAksMetricAlertMetricFrequencyModel = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"Short",
                          [32m+[0m [0m"Long",
                        ]
                      [32m+[0m [0mdefaultValue  = "Long"
                      [32m+[0m [0mmetadata      = {
                          [32m+[0m [0mdescription = "Which Metric polling frequency model to use"
                        }
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0mAksPaidSkuForSLA                   = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Use the paid sku for SLA rather than SLO"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mAutoscaleProfile                   = {
                      [32m+[0m [0mdefaultValue = {
                          [32m+[0m [0mbalance-similar-node-groups      = "true"
                          [32m+[0m [0mexpander                         = "random"
                          [32m+[0m [0mmax-empty-bulk-delete            = "10"
                          [32m+[0m [0mmax-graceful-termination-sec     = "600"
                          [32m+[0m [0mmax-node-provision-time          = "15m"
                          [32m+[0m [0mmax-total-unready-percentage     = "45"
                          [32m+[0m [0mnew-pod-scale-up-delay           = "0s"
                          [32m+[0m [0mok-total-unready-count           = "3"
                          [32m+[0m [0mscale-down-delay-after-add       = "10m"
                          [32m+[0m [0mscale-down-delay-after-delete    = "20s"
                          [32m+[0m [0mscale-down-delay-after-failure   = "3m"
                          [32m+[0m [0mscale-down-unneeded-time         = "10m"
                          [32m+[0m [0mscale-down-unready-time          = "20m"
                          [32m+[0m [0mscale-down-utilization-threshold = "0.5"
                          [32m+[0m [0mscan-interval                    = "10s"
                          [32m+[0m [0mskip-nodes-with-local-storage    = "true"
                          [32m+[0m [0mskip-nodes-with-system-pods      = "true"
                        }
                      [32m+[0m [0mtype         = "object"
                    }
                  [32m+[0m [0mCreateNetworkSecurityGroupFlowLogs = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Configure Flow Logs for Network Security Groups in the NetworkWatcherRG resource group. Requires Contributor RBAC on NetworkWatcherRG and Reader on Subscription."
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mCreateNetworkSecurityGroups        = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Deploy NSGs to your vnet subnets. (works with Custom Networking only, not BYO)"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mDefenderForContainers              = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable Microsoft Defender for Containers (currently preview)"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mJustUseSystemPool                  = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Only use the system node pool"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mKeyVaultPurgeProtection            = {
                      [32m+[0m [0mdefaultValue = true
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "If purge protection is enabled"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mKeyVaultSoftDelete                 = {
                      [32m+[0m [0mdefaultValue = true
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "If soft delete protection is enabled"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mSystemPoolCustomPreset             = {
                      [32m+[0m [0mdefaultValue = {}
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "A custom system pool spec"
                        }
                      [32m+[0m [0mtype         = "object"
                    }
                  [32m+[0m [0mSystemPoolType                     = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"Cost-Optimised",
                          [32m+[0m [0m"Standard",
                          [32m+[0m [0m"HighSpec",
                          [32m+[0m [0m"Custom",
                        ]
                      [32m+[0m [0mdefaultValue  = "Cost-Optimised"
                      [32m+[0m [0mmetadata      = {
                          [32m+[0m [0mdescription = "The System Pool Preset sizing"
                        }
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0maad_tenant_id                      = {
                      [32m+[0m [0mdefaultValue = ""
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The ID of the Azure AD tenant"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0macrAgentPoolSubnetAddressPrefix    = {
                      [32m+[0m [0mdefaultValue = "10.240.4.64/26"
                      [32m+[0m [0mmaxLength    = 18
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The address range for the ACR in your custom vnet"
                        }
                      [32m+[0m [0mminLength    = 9
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0macrPrivatePool                     = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable support for ACR private pool"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0macrPushRolePrincipalId             = {
                      [32m+[0m [0mdefaultValue = ""
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The principal ID of the service principal to assign the push role to the ACR"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0macrUntaggedRetentionPolicy         = {
                      [32m+[0m [0mdefaultValue = 30
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The number of days to retain untagged manifests for"
                        }
                      [32m+[0m [0mtype         = "int"
                    }
                  [32m+[0m [0macrUntaggedRetentionPolicyEnabled  = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable removing of untagged manifests from ACR"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0madminPrincipalId                   = {
                      [32m+[0m [0mdefaultValue = ""
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The principal ID to assign the AKS admin role."
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0magentCount                         = {
                      [32m+[0m [0mdefaultValue = 3
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The number of agents for the user node pool"
                        }
                      [32m+[0m [0mtype         = "int"
                    }
                  [32m+[0m [0magentCountMax                      = {
                      [32m+[0m [0mdefaultValue = 0
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The maximum number of nodes for the user node pool"
                        }
                      [32m+[0m [0mtype         = "int"
                    }
                  [32m+[0m [0magentVMSize                        = {
                      [32m+[0m [0mdefaultValue = "Standard_DS3_v2"
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "VM SKU"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0maksOutboundTrafficType             = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"loadBalancer",
                          [32m+[0m [0m"managedNATGateway",
                          [32m+[0m [0m"userAssignedNATGateway",
                        ]
                      [32m+[0m [0mdefaultValue  = "loadBalancer"
                      [32m+[0m [0mmetadata      = {
                          [32m+[0m [0mdescription = "Outbound traffic type for the egress traffic of your cluster"
                        }
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0mappGWcount                         = {
                      [32m+[0m [0mdefaultValue = 2
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The number of applciation gateway instances"
                        }
                      [32m+[0m [0mtype         = "int"
                    }
                  [32m+[0m [0mappGWenableFirewall                = {
                      [32m+[0m [0mdefaultValue = true
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable the WAF Firewall, valid for WAF_v2 SKUs"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mappGWmaxCount                      = {
                      [32m+[0m [0mdefaultValue = 0
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The maximum number of application gateway instances"
                        }
                      [32m+[0m [0mtype         = "int"
                    }
                  [32m+[0m [0mappGWsku                           = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"Standard_v2",
                          [32m+[0m [0m"WAF_v2",
                        ]
                      [32m+[0m [0mdefaultValue  = "WAF_v2"
                      [32m+[0m [0mmetadata      = {
                          [32m+[0m [0mdescription = "The SKU for AppGw"
                        }
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0mappGwFirewallMode                  = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"Prevention",
                          [32m+[0m [0m"Detection",
                        ]
                      [32m+[0m [0mdefaultValue  = "Prevention"
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0mappgwKVIntegration                 = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable key vault integration for application gateway"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mauthorizedIPRanges                 = {
                      [32m+[0m [0mdefaultValue = []
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The IP addresses that are allowed to access the API server"
                        }
                      [32m+[0m [0mtype         = "array"
                    }
                  [32m+[0m [0mavailabilityZones                  = {
                      [32m+[0m [0mdefaultValue = []
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The zones to use for a node pool"
                        }
                      [32m+[0m [0mtype         = "array"
                    }
                  [32m+[0m [0mazureFirewalls                     = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Create an Azure Firewall"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mazureKeyvaultSecretsProvider       = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Installs the AKS KV CSI provider"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mazurePolicyInitiative              = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"Baseline",
                          [32m+[0m [0m"Restricted",
                        ]
                      [32m+[0m [0mdefaultValue  = "Baseline"
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0mazurepolicy                        = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"",
                          [32m+[0m [0m"audit",
                          [32m+[0m [0m"deny",
                        ]
                      [32m+[0m [0mdefaultValue  = ""
                      [32m+[0m [0mmetadata      = {
                          [32m+[0m [0mdescription = "Enable the Azure Policy addon"
                        }
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0mbastion                            = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Deploy Azure Bastion to your vnet. (works with Custom Networking only, not BYO)"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mbastionSubnetAddressPrefix         = {
                      [32m+[0m [0mdefaultValue = "10.240.4.128/26"
                      [32m+[0m [0mmaxLength    = 18
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The address range for Azure Bastion in your custom vnet"
                        }
                      [32m+[0m [0mminLength    = 9
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mbyoAGWSubnetId                     = {
                      [32m+[0m [0mdefaultValue = ""
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Full resource id path of an existing subnet to use for Application Gateway"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mbyoAKSSubnetId                     = {
                      [32m+[0m [0mdefaultValue = ""
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Full resource id path of an existing subnet to use for AKS"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mcertManagerFW                      = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Add application rules to the firewall for certificate management."
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mcreateAksMetricAlerts              = {
                      [32m+[0m [0mdefaultValue = true
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable Metric Alerts"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mcreateKV                           = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Creates a Key Vault"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mcreateNatGateway                   = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Create a new Nat Gateway, applies to custom networking only"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mcustom_vnet                        = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Are you providing your own vNet CIDR blocks"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mdnsPrefix                          = {
                      [32m+[0m [0mdefaultValue = "[format('{0}-dns', parameters('resourceName'))]"
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "DNS prefix. Defaults to {resourceName}-dns"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mdnsServiceIP                       = {
                      [32m+[0m [0mdefaultValue = "172.10.0.10"
                      [32m+[0m [0mmaxLength    = 15
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The IP address to reserve for DNS"
                        }
                      [32m+[0m [0mminLength    = 7
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mdnsZoneId                          = {
                      [32m+[0m [0mdefaultValue = ""
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The full Azure resource ID of the DNS zone to use for the AKS cluster"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mdockerBridgeCidr                   = {
                      [32m+[0m [0mdefaultValue = "172.17.0.1/16"
                      [32m+[0m [0mmaxLength    = 18
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The address range to use for the docker bridge"
                        }
                      [32m+[0m [0mminLength    = 9
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0menableACRTrustPolicy               = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable the ACR Content Trust Policy, SKU must be set to Premium"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0menableAzureRBAC                    = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable RBAC using AAD"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0menablePrivateCluster               = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable private cluster"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0menable_aad                         = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable Azure AD integration on AKS"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mgitops                             = {
                      [32m+[0m [0mdefaultValue = ""
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable the git ops addon"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mingressApplicationGateway          = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Create an Application Gateway"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mkubernetesVersion                  = {
                      [32m+[0m [0mdefaultValue = "1.22.6"
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Kubernetes Version"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mkvIPAllowlist                      = {
                      [32m+[0m [0mdefaultValue = []
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Add IP to KV firewall allow-list"
                        }
                      [32m+[0m [0mtype         = "array"
                    }
                  [32m+[0m [0mkvOfficerRolePrincipalId           = {
                      [32m+[0m [0mdefaultValue = ""
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The principal ID of the service principal that has access to the Key Vault"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mlocation                           = {
                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The location to use for the deployment. defaults to Resource Groups location."
                        }
                      [32m+[0m [0mminLength    = 2
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mmaxPods                            = {
                      [32m+[0m [0mdefaultValue = 30
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The maximum number of pods per node."
                        }
                      [32m+[0m [0mtype         = "int"
                    }
                  [32m+[0m [0mnatGwIdleTimeout                   = {
                      [32m+[0m [0mdefaultValue = 30
                      [32m+[0m [0mmaxValue     = 120
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Outbound flow idle timeout in minutes for NatGw"
                        }
                      [32m+[0m [0mminValue     = 4
                      [32m+[0m [0mtype         = "int"
                    }
                  [32m+[0m [0mnatGwIpCount                       = {
                      [32m+[0m [0mdefaultValue = 2
                      [32m+[0m [0mmaxValue     = 16
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The effective outbound IP resources of the cluster NAT gateway"
                        }
                      [32m+[0m [0mminValue     = 1
                      [32m+[0m [0mtype         = "int"
                    }
                  [32m+[0m [0mnetworkPlugin                      = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"azure",
                          [32m+[0m [0m"kubenet",
                        ]
                      [32m+[0m [0mdefaultValue  = "azure"
                      [32m+[0m [0mmetadata      = {
                          [32m+[0m [0mdescription = "The network plugin type"
                        }
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0mnetworkPolicy                      = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"",
                          [32m+[0m [0m"azure",
                          [32m+[0m [0m"calico",
                        ]
                      [32m+[0m [0mdefaultValue  = ""
                      [32m+[0m [0mmetadata      = {
                          [32m+[0m [0mdescription = "The network policy to use."
                        }
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0momsagent                           = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Create, and use a new Log Analytics workspace for AKS logs"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mopenServiceMeshAddon               = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enables Open Service Mesh"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mosDiskSizeGB                       = {
                      [32m+[0m [0mdefaultValue = 0
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Disk size in GB"
                        }
                      [32m+[0m [0mtype         = "int"
                    }
                  [32m+[0m [0mosDiskType                         = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"Ephemeral",
                          [32m+[0m [0m"Managed",
                        ]
                      [32m+[0m [0mdefaultValue  = "Ephemeral"
                      [32m+[0m [0mmetadata      = {
                          [32m+[0m [0mdescription = "OS disk type"
                        }
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0mpodCidr                            = {
                      [32m+[0m [0mdefaultValue = "10.240.100.0/24"
                      [32m+[0m [0mmaxLength    = 18
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The address range to use for pods"
                        }
                      [32m+[0m [0mminLength    = 9
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mprivateIpApplicationGateway        = {
                      [32m+[0m [0mdefaultValue = ""
                      [32m+[0m [0mmaxLength    = 15
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "A known private ip in the Application Gateway subnet range to be allocated for internal traffic"
                        }
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mprivateLinkSubnetAddressPrefix     = {
                      [32m+[0m [0mdefaultValue = "10.240.4.192/26"
                      [32m+[0m [0mmaxLength    = 18
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The address range for private link in your custom vnet"
                        }
                      [32m+[0m [0mminLength    = 9
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mprivateLinks                       = {
                      [32m+[0m [0mdefaultValue = false
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "Enable support for private links"
                        }
                      [32m+[0m [0mtype         = "bool"
                    }
                  [32m+[0m [0mregistries_sku                     = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"",
                          [32m+[0m [0m"Basic",
                          [32m+[0m [0m"Standard",
                          [32m+[0m [0m"Premium",
                        ]
                      [32m+[0m [0mdefaultValue  = ""
                      [32m+[0m [0mmetadata      = {
                          [32m+[0m [0mdescription = "The SKU to use for the Container Registry"
                        }
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0mresourceName                       = {
                      [32m+[0m [0mmaxLength = 20
                      [32m+[0m [0mmetadata  = {
                          [32m+[0m [0mdescription = "Used to name all resources"
                        }
                      [32m+[0m [0mminLength = 3
                      [32m+[0m [0mtype      = "string"
                    }
                  [32m+[0m [0mretentionInDays                    = {
                      [32m+[0m [0mdefaultValue = 30
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The Log Analytics retention period"
                        }
                      [32m+[0m [0mtype         = "int"
                    }
                  [32m+[0m [0mserviceCidr                        = {
                      [32m+[0m [0mdefaultValue = "172.10.0.0/16"
                      [32m+[0m [0mmaxLength    = 18
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The address range to use for services"
                        }
                      [32m+[0m [0mminLength    = 9
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mupgradeChannel                     = {
                      [32m+[0m [0mallowedValues = [
                          [32m+[0m [0m"",
                          [32m+[0m [0m"none",
                          [32m+[0m [0m"patch",
                          [32m+[0m [0m"stable",
                          [32m+[0m [0m"rapid",
                          [32m+[0m [0m"node-image",
                        ]
                      [32m+[0m [0mdefaultValue  = ""
                      [32m+[0m [0mmetadata      = {
                          [32m+[0m [0mdescription = "AKS upgrade channel"
                        }
                      [32m+[0m [0mtype          = "string"
                    }
                  [32m+[0m [0mvnetAddressPrefix                  = {
                      [32m+[0m [0mdefaultValue = "10.240.0.0/16"
                      [32m+[0m [0mmaxLength    = 18
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The address range for the custom vnet"
                        }
                      [32m+[0m [0mminLength    = 9
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mvnetAksSubnetAddressPrefix         = {
                      [32m+[0m [0mdefaultValue = "10.240.0.0/22"
                      [32m+[0m [0mmaxLength    = 18
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The address range for AKS in your custom vnet"
                        }
                      [32m+[0m [0mminLength    = 9
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mvnetAppGatewaySubnetAddressPrefix  = {
                      [32m+[0m [0mdefaultValue = "10.240.5.0/24"
                      [32m+[0m [0mmaxLength    = 18
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The address range for the App Gateway in your custom vnet"
                        }
                      [32m+[0m [0mminLength    = 9
                      [32m+[0m [0mtype         = "string"
                    }
                  [32m+[0m [0mvnetFirewallSubnetAddressPrefix    = {
                      [32m+[0m [0mdefaultValue = "10.240.50.0/24"
                      [32m+[0m [0mmaxLength    = 18
                      [32m+[0m [0mmetadata     = {
                          [32m+[0m [0mdescription = "The address range for Azure Firewall in your custom vnet"
                        }
                      [32m+[0m [0mminLength    = 9
                      [32m+[0m [0mtype         = "string"
                    }
                }
              [32m+[0m [0mresources      = [
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2018-11-30"
                      [32m+[0m [0mcondition  = "[variables('aks_byo_identity')]"
                      [32m+[0m [0mlocation   = "[parameters('location')]"
                      [32m+[0m [0mname       = "[format('id-aks-{0}', parameters('resourceName'))]"
                      [32m+[0m [0mtype       = "Microsoft.ManagedIdentity/userAssignedIdentities"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-06-01-preview"
                      [32m+[0m [0mcondition  = "[parameters('createKV')]"
                      [32m+[0m [0mlocation   = "[parameters('location')]"
                      [32m+[0m [0mname       = "[variables('akvName')]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0menablePurgeProtection        = "[if(parameters('KeyVaultPurgeProtection'), true(), json('null'))]"
                          [32m+[0m [0menableRbacAuthorization      = true
                          [32m+[0m [0menableSoftDelete             = "[parameters('KeyVaultSoftDelete')]"
                          [32m+[0m [0menabledForDeployment         = false
                          [32m+[0m [0menabledForDiskEncryption     = false
                          [32m+[0m [0menabledForTemplateDeployment = false
                          [32m+[0m [0mnetworkAcls                  = "[if(and(parameters('privateLinks'), not(empty(parameters('kvIPAllowlist')))), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny', 'ipRules', variables('kvIPRules'), 'virtualNetworkRules', createArray()), createObject())]"
                          [32m+[0m [0mpublicNetworkAccess          = "[if(and(parameters('privateLinks'), empty(parameters('kvIPAllowlist'))), 'disabled', 'enabled')]"
                          [32m+[0m [0msku                          = {
                              [32m+[0m [0mfamily = "A"
                              [32m+[0m [0mname   = "standard"
                            }
                          [32m+[0m [0mtenantId                     = "[subscription().tenantId]"
                        }
                      [32m+[0m [0mtype       = "Microsoft.KeyVault/vaults"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[and(parameters('createKV'), parameters('appgwKVIntegration'))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-appgw-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.KeyVault/vaults', variables('akvName'))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'AppGw', variables('keyVaultSecretsUserRole'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[if(variables('deployAppGw'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-appgw-{0}', parameters('resourceName'))), '2018-11-30').principalId, '')]"
                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                          [32m+[0m [0mroleDefinitionId = "[variables('keyVaultSecretsUserRole')]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.KeyVault/vaults/{0}', variables('akvName'))]"
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[and(parameters('createKV'), parameters('azureKeyvaultSecretsProvider'))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.KeyVault/vaults', variables('akvName'))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'CSIDriver', variables('keyVaultSecretsUserRole'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))).addonProfiles.azureKeyvaultSecretsProvider.identity.objectId]"
                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                          [32m+[0m [0mroleDefinitionId = "[variables('keyVaultSecretsUserRole')]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.KeyVault/vaults/{0}', variables('akvName'))]"
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[and(parameters('createKV'), not(empty(parameters('kvOfficerRolePrincipalId'))))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.KeyVault/vaults', variables('akvName'))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'usersecret', variables('keyVaultSecretsOfficerRole'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[parameters('kvOfficerRolePrincipalId')]"
                          [32m+[0m [0mprincipalType    = "User"
                          [32m+[0m [0mroleDefinitionId = "[variables('keyVaultSecretsOfficerRole')]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.KeyVault/vaults/{0}', variables('akvName'))]"
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[and(parameters('createKV'), not(empty(parameters('kvOfficerRolePrincipalId'))))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.KeyVault/vaults', variables('akvName'))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'usercert', variables('keyVaultCertsOfficerRole'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[parameters('kvOfficerRolePrincipalId')]"
                          [32m+[0m [0mprincipalType    = "User"
                          [32m+[0m [0mroleDefinitionId = "[variables('keyVaultCertsOfficerRole')]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.KeyVault/vaults/{0}', variables('akvName'))]"
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-05-01-preview"
                      [32m+[0m [0mcondition  = "[and(variables('createLaw'), parameters('createKV'))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.KeyVault/vaults', variables('akvName'))]",
                        ]
                      [32m+[0m [0mname       = "kvDiags"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mlogs        = [
                              [32m+[0m [0m{
                                  [32m+[0m [0mcategory = "AuditEvent"
                                  [32m+[0m [0menabled  = true
                                },
                            ]
                          [32m+[0m [0mmetrics     = [
                              [32m+[0m [0m{
                                  [32m+[0m [0mcategory = "AllMetrics"
                                  [32m+[0m [0menabled  = true
                                },
                            ]
                          [32m+[0m [0mworkspaceId = "[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.KeyVault/vaults/{0}', variables('akvName'))]"
                      [32m+[0m [0mtype       = "Microsoft.Insights/diagnosticSettings"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-06-01-preview"
                      [32m+[0m [0mcondition  = "[not(empty(parameters('registries_sku')))]"
                      [32m+[0m [0mlocation   = "[parameters('location')]"
                      [32m+[0m [0mname       = "[variables('acrName')]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mpolicies            = {
                              [32m+[0m [0mretentionPolicy = "[if(parameters('acrUntaggedRetentionPolicyEnabled'), createObject('status', 'enabled', 'days', parameters('acrUntaggedRetentionPolicy')), json('null'))]"
                              [32m+[0m [0mtrustPolicy     = "[if(parameters('enableACRTrustPolicy'), createObject('status', variables('acrContentTrustEnabled'), 'type', 'Notary'), createObject())]"
                            }
                          [32m+[0m [0mpublicNetworkAccess = "[if(parameters('privateLinks'), 'Disabled', 'Enabled')]"
                          [32m+[0m [0mzoneRedundancy      = "[variables('acrZoneRedundancyEnabled')]"
                        }
                      [32m+[0m [0msku        = {
                          [32m+[0m [0mname = "[parameters('registries_sku')]"
                        }
                      [32m+[0m [0mtype       = "Microsoft.ContainerRegistry/registries"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-05-01-preview"
                      [32m+[0m [0mcondition  = "[and(variables('createLaw'), not(empty(parameters('registries_sku'))))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]",
                        ]
                      [32m+[0m [0mname       = "acrDiags"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mlogs        = [
                              [32m+[0m [0m{
                                  [32m+[0m [0mcategory = "ContainerRegistryRepositoryEvents"
                                  [32m+[0m [0menabled  = true
                                },
                              [32m+[0m [0m{
                                  [32m+[0m [0mcategory = "ContainerRegistryLoginEvents"
                                  [32m+[0m [0menabled  = true
                                },
                            ]
                          [32m+[0m [0mmetrics     = [
                              [32m+[0m [0m{
                                  [32m+[0m [0mcategory  = "AllMetrics"
                                  [32m+[0m [0menabled   = true
                                  [32m+[0m [0mtimeGrain = "PT1M"
                                },
                            ]
                          [32m+[0m [0mworkspaceId = "[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.ContainerRegistry/registries/{0}', variables('acrName'))]"
                      [32m+[0m [0mtype       = "Microsoft.Insights/diagnosticSettings"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[not(empty(parameters('registries_sku')))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'Acr', variables('AcrPullRole'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))).identityProfile.kubeletidentity.objectId]"
                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                          [32m+[0m [0mroleDefinitionId = "[variables('AcrPullRole')]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.ContainerRegistry/registries/{0}', variables('acrName'))]"
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[and(not(empty(parameters('registries_sku'))), not(empty(parameters('acrPushRolePrincipalId'))))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'Acr', variables('AcrPushRole'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[parameters('acrPushRolePrincipalId')]"
                          [32m+[0m [0mprincipalType    = "User"
                          [32m+[0m [0mroleDefinitionId = "[variables('AcrPushRole')]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.ContainerRegistry/registries/{0}', variables('acrName'))]"
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2018-11-30"
                      [32m+[0m [0mcondition  = "[variables('deployAppGw')]"
                      [32m+[0m [0mlocation   = "[parameters('location')]"
                      [32m+[0m [0mname       = "[format('id-appgw-{0}', parameters('resourceName'))]"
                      [32m+[0m [0mtype       = "Microsoft.ManagedIdentity/userAssignedIdentities"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-02-01"
                      [32m+[0m [0mcondition  = "[variables('deployAppGw')]"
                      [32m+[0m [0mlocation   = "[parameters('location')]"
                      [32m+[0m [0mname       = "[format('pip-agw-{0}', parameters('resourceName'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mpublicIPAllocationMethod = "Static"
                        }
                      [32m+[0m [0msku        = {
                          [32m+[0m [0mname = "Standard"
                        }
                      [32m+[0m [0mtype       = "Microsoft.Network/publicIPAddresses"
                      [32m+[0m [0mzones      = "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), createArray())]"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-02-01"
                      [32m+[0m [0mcondition  = "[variables('deployAppGw')]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-appgw-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.Network/publicIPAddresses', format('pip-agw-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'network')]",
                        ]
                      [32m+[0m [0midentity   = {
                          [32m+[0m [0mtype                   = "UserAssigned"
                          [32m+[0m [0muserAssignedIdentities = {
                              [32m+[0m [0m"[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-appgw-{0}', parameters('resourceName'))))]" = {}
                            }
                        }
                      [32m+[0m [0mlocation   = "[parameters('location')]"
                      [32m+[0m [0mname       = "[variables('appgwName')]"
                      [32m+[0m [0mproperties = "[union(createObject('sku', variables('appGWskuObj'), 'sslPolicy', createObject('policyType', 'Predefined', 'policyName', 'AppGwSslPolicy20170401S'), 'webApplicationFirewallConfiguration', if(variables('appGWenableWafFirewall'), variables('appGwFirewallConfigOwasp'), json('null')), 'gatewayIPConfigurations', createArray(createObject('name', 'besubnet', 'properties', createObject('subnet', createObject('id', if(parameters('ingressApplicationGateway'), if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.appGwSubnetId.value, parameters('byoAGWSubnetId')), ''))))), 'frontendIPConfigurations', if(empty(parameters('privateIpApplicationGateway')), array(variables('frontendPublicIpConfig')), concat(array(variables('frontendPublicIpConfig')), array(createObject('properties', createObject('privateIPAllocationMethod', 'Static', 'privateIPAddress', parameters('privateIpApplicationGateway'), 'subnet', createObject('id', if(parameters('ingressApplicationGateway'), if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.appGwSubnetId.value, parameters('byoAGWSubnetId')), ''))), 'name', 'appGatewayPrivateIP')))), 'frontendPorts', createArray(createObject('name', 'appGatewayFrontendPort', 'properties', createObject('port', 80))), 'backendAddressPools', createArray(createObject('name', 'defaultaddresspool')), 'backendHttpSettingsCollection', createArray(createObject('name', 'defaulthttpsetting', 'properties', createObject('port', 80, 'protocol', 'Http', 'cookieBasedAffinity', 'Disabled', 'requestTimeout', 30, 'pickHostNameFromBackendAddress', true()))), 'httpListeners', createArray(createObject('name', 'hlisten', 'properties', createObject('frontendIPConfiguration', createObject('id', if(empty(parameters('privateIpApplicationGateway')), format('{0}/frontendIPConfigurations/appGatewayFrontendIP', variables('appgwResourceId')), format('{0}/frontendIPConfigurations/appGatewayPrivateIP', variables('appgwResourceId')))), 'frontendPort', createObject('id', format('{0}/frontendPorts/appGatewayFrontendPort', variables('appgwResourceId'))), 'protocol', 'Http'))), 'requestRoutingRules', createArray(createObject('name', 'appGwRoutingRuleName', 'properties', createObject('ruleType', 'Basic', 'httpListener', createObject('id', format('{0}/httpListeners/hlisten', variables('appgwResourceId'))), 'backendAddressPool', createObject('id', format('{0}/backendAddressPools/defaultaddresspool', variables('appgwResourceId'))), 'backendHttpSettings', createObject('id', format('{0}/backendHttpSettingsCollection/defaulthttpsetting', variables('appgwResourceId'))))))), if(greater(parameters('appGWmaxCount'), 0), createObject('autoscaleConfiguration', createObject('minCapacity', parameters('appGWcount'), 'maxCapacity', parameters('appGWmaxCount'))), createObject()))]"
                      [32m+[0m [0mtype       = "Microsoft.Network/applicationGateways"
                      [32m+[0m [0mzones      = "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), createArray())]"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[and(variables('DEPLOY_APPGW_ADDON'), variables('deployAppGw'))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.Network/applicationGateways', variables('appgwName'))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'Agic', variables('contributor'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))).addonProfiles.ingressApplicationGateway.identity.objectId]"
                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                          [32m+[0m [0mroleDefinitionId = "[variables('contributor')]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.Network/applicationGateways/{0}', variables('appgwName'))]"
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[and(variables('DEPLOY_APPGW_ADDON'), variables('deployAppGw'))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'Agic', variables('reader'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))).addonProfiles.ingressApplicationGateway.identity.objectId]"
                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                          [32m+[0m [0mroleDefinitionId = "[variables('reader')]"
                        }
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[and(variables('DEPLOY_APPGW_ADDON'), variables('deployAppGw'))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-appgw-{0}', parameters('resourceName')))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'Agic', variables('managedIdentityOperator'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))).addonProfiles.ingressApplicationGateway.identity.objectId]"
                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                          [32m+[0m [0mroleDefinitionId = "[variables('managedIdentityOperator')]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', format('id-appgw-{0}', parameters('resourceName')))]"
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-05-01-preview"
                      [32m+[0m [0mcondition  = "[and(variables('createLaw'), variables('deployAppGw'))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.Network/applicationGateways', variables('appgwName'))]",
                        ]
                      [32m+[0m [0mname       = "appgwDiag"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mlogs        = [
                              [32m+[0m [0m{
                                  [32m+[0m [0mcategory = "ApplicationGatewayAccessLog"
                                  [32m+[0m [0menabled  = true
                                },
                              [32m+[0m [0m{
                                  [32m+[0m [0mcategory = "ApplicationGatewayPerformanceLog"
                                  [32m+[0m [0menabled  = true
                                },
                              [32m+[0m [0m{
                                  [32m+[0m [0mcategory = "ApplicationGatewayFirewallLog"
                                  [32m+[0m [0menabled  = true
                                },
                            ]
                          [32m+[0m [0mworkspaceId = "[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.Network/applicationGateways/{0}', variables('appgwName'))]"
                      [32m+[0m [0mtype       = "Microsoft.Insights/diagnosticSettings"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2022-03-02-preview"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.Network/applicationGateways', variables('appgwName'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'network')]",
                          [32m+[0m [0m"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-aks-{0}', parameters('resourceName')))]",
                        ]
                      [32m+[0m [0midentity   = "[if(variables('aks_byo_identity'), variables('aks_identity'), createObject('type', 'SystemAssigned'))]"
                      [32m+[0m [0mlocation   = "[parameters('location')]"
                      [32m+[0m [0mname       = "[format('aks-{0}', parameters('resourceName'))]"
                      [32m+[0m [0mproperties = "[if(and(parameters('DefenderForContainers'), parameters('omsagent')), union(createObject('kubernetesVersion', parameters('kubernetesVersion'), 'enableRBAC', true(), 'dnsPrefix', parameters('dnsPrefix'), 'aadProfile', if(parameters('enable_aad'), createObject('managed', true(), 'enableAzureRBAC', parameters('enableAzureRBAC'), 'tenantID', parameters('aad_tenant_id')), null()), 'apiServerAccessProfile', if(not(empty(parameters('authorizedIPRanges'))), createObject('authorizedIPRanges', parameters('authorizedIPRanges')), createObject('enablePrivateCluster', parameters('enablePrivateCluster'), 'privateDNSZone', if(parameters('enablePrivateCluster'), 'none', ''), 'enablePrivateClusterPublicFQDN', parameters('enablePrivateCluster'))), 'agentPoolProfiles', if(parameters('JustUseSystemPool'), array(union(createObject('name', 'npsystem', 'mode', 'System', 'osType', 'Linux', 'maxPods', 30, 'type', 'VirtualMachineScaleSets', 'vnetSubnetID', if(not(empty(if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')))), if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')), json('null')), 'upgradeSettings', createObject('maxSurge', '33%'), 'nodeTaints', createArray(if(parameters('JustUseSystemPool'), '', 'CriticalAddonsOnly=true:NoSchedule'))), variables('userPoolVmProfile'))), concat(array(union(createObject('name', 'npsystem', 'mode', 'System', 'osType', 'Linux', 'maxPods', 30, 'type', 'VirtualMachineScaleSets', 'vnetSubnetID', if(not(empty(if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')))), if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')), json('null')), 'upgradeSettings', createObject('maxSurge', '33%'), 'nodeTaints', createArray(if(parameters('JustUseSystemPool'), '', 'CriticalAddonsOnly=true:NoSchedule'))), if(and(equals(parameters('SystemPoolType'), 'Custom'), not(equals(parameters('SystemPoolCustomPreset'), createObject()))), parameters('SystemPoolCustomPreset'), variables('systemPoolPresets')[parameters('SystemPoolType')]))), array(union(createObject('name', 'npuser01', 'mode', 'User', 'osDiskType', parameters('osDiskType'), 'osDiskSizeGB', parameters('osDiskSizeGB'), 'osType', 'Linux', 'maxPods', parameters('maxPods'), 'type', 'VirtualMachineScaleSets', 'vnetSubnetID', if(not(empty(if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')))), if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')), json('null')), 'upgradeSettings', createObject('maxSurge', '33%')), variables('userPoolVmProfile'))))), 'networkProfile', createObject('loadBalancerSku', 'standard', 'networkPlugin', parameters('networkPlugin'), 'networkPolicy', parameters('networkPolicy'), 'podCidr', parameters('podCidr'), 'serviceCidr', parameters('serviceCidr'), 'dnsServiceIP', parameters('dnsServiceIP'), 'dockerBridgeCidr', parameters('dockerBridgeCidr'), 'outboundType', parameters('aksOutboundTrafficType'), 'natGatewayProfile', if(equals(parameters('aksOutboundTrafficType'), 'managedNATGateway'), createObject('managedOutboundIPProfile', createObject('count', parameters('natGwIpCount')), 'idleTimeoutInMinutes', parameters('natGwIdleTimeout')), createObject())), 'disableLocalAccounts', and(parameters('AksDisableLocalAccounts'), parameters('enable_aad')), 'autoUpgradeProfile', if(not(empty(parameters('upgradeChannel'))), createObject('upgradeChannel', parameters('upgradeChannel')), createObject()), 'addonProfiles', if(not(empty(variables('aks_addons1'))), variables('aks_addons1'), variables('aks_addons')), 'autoScalerProfile', if(variables('autoScale'), parameters('AutoscaleProfile'), createObject())), variables('azureDefenderSecurityProfile')), createObject('kubernetesVersion', parameters('kubernetesVersion'), 'enableRBAC', true(), 'dnsPrefix', parameters('dnsPrefix'), 'aadProfile', if(parameters('enable_aad'), createObject('managed', true(), 'enableAzureRBAC', parameters('enableAzureRBAC'), 'tenantID', parameters('aad_tenant_id')), null()), 'apiServerAccessProfile', if(not(empty(parameters('authorizedIPRanges'))), createObject('authorizedIPRanges', parameters('authorizedIPRanges')), createObject('enablePrivateCluster', parameters('enablePrivateCluster'), 'privateDNSZone', if(parameters('enablePrivateCluster'), 'none', ''), 'enablePrivateClusterPublicFQDN', parameters('enablePrivateCluster'))), 'agentPoolProfiles', if(parameters('JustUseSystemPool'), array(union(createObject('name', 'npsystem', 'mode', 'System', 'osType', 'Linux', 'maxPods', 30, 'type', 'VirtualMachineScaleSets', 'vnetSubnetID', if(not(empty(if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')))), if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')), json('null')), 'upgradeSettings', createObject('maxSurge', '33%'), 'nodeTaints', createArray(if(parameters('JustUseSystemPool'), '', 'CriticalAddonsOnly=true:NoSchedule'))), variables('userPoolVmProfile'))), concat(array(union(createObject('name', 'npsystem', 'mode', 'System', 'osType', 'Linux', 'maxPods', 30, 'type', 'VirtualMachineScaleSets', 'vnetSubnetID', if(not(empty(if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')))), if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')), json('null')), 'upgradeSettings', createObject('maxSurge', '33%'), 'nodeTaints', createArray(if(parameters('JustUseSystemPool'), '', 'CriticalAddonsOnly=true:NoSchedule'))), if(and(equals(parameters('SystemPoolType'), 'Custom'), not(equals(parameters('SystemPoolCustomPreset'), createObject()))), parameters('SystemPoolCustomPreset'), variables('systemPoolPresets')[parameters('SystemPoolType')]))), array(union(createObject('name', 'npuser01', 'mode', 'User', 'osDiskType', parameters('osDiskType'), 'osDiskSizeGB', parameters('osDiskSizeGB'), 'osType', 'Linux', 'maxPods', parameters('maxPods'), 'type', 'VirtualMachineScaleSets', 'vnetSubnetID', if(not(empty(if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')))), if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.aksSubnetId.value, parameters('byoAKSSubnetId')), json('null')), 'upgradeSettings', createObject('maxSurge', '33%')), variables('userPoolVmProfile'))))), 'networkProfile', createObject('loadBalancerSku', 'standard', 'networkPlugin', parameters('networkPlugin'), 'networkPolicy', parameters('networkPolicy'), 'podCidr', parameters('podCidr'), 'serviceCidr', parameters('serviceCidr'), 'dnsServiceIP', parameters('dnsServiceIP'), 'dockerBridgeCidr', parameters('dockerBridgeCidr'), 'outboundType', parameters('aksOutboundTrafficType'), 'natGatewayProfile', if(equals(parameters('aksOutboundTrafficType'), 'managedNATGateway'), createObject('managedOutboundIPProfile', createObject('count', parameters('natGwIpCount')), 'idleTimeoutInMinutes', parameters('natGwIdleTimeout')), createObject())), 'disableLocalAccounts', and(parameters('AksDisableLocalAccounts'), parameters('enable_aad')), 'autoUpgradeProfile', if(not(empty(parameters('upgradeChannel'))), createObject('upgradeChannel', parameters('upgradeChannel')), createObject()), 'addonProfiles', if(not(empty(variables('aks_addons1'))), variables('aks_addons1'), variables('aks_addons')), 'autoScalerProfile', if(variables('autoScale'), parameters('AutoscaleProfile'), createObject())))]"
                      [32m+[0m [0msku        = {
                          [32m+[0m [0mname = "Basic"
                          [32m+[0m [0mtier = "[variables('akssku')]"
                        }
                      [32m+[0m [0mtype       = "Microsoft.ContainerService/managedClusters"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2020-09-01"
                      [32m+[0m [0mcondition  = "[not(empty(parameters('azurepolicy')))]"
                      [32m+[0m [0mlocation   = "[parameters('location')]"
                      [32m+[0m [0mname       = "[format('{0}-{1}', parameters('resourceName'), parameters('azurePolicyInitiative'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mdescription        = "As per: https://github.com/Azure/azure-policy/blob/master/built-in-policies/policySetDefinitions/Kubernetes/"
                          [32m+[0m [0mdisplayName        = "[format('Kubernetes cluster pod security {0} standards for Linux-based workloads', parameters('azurePolicyInitiative'))]"
                          [32m+[0m [0mmetadata           = {
                              [32m+[0m [0massignedBy = "Aks Construction"
                            }
                          [32m+[0m [0mparameters         = {
                              [32m+[0m [0meffect             = {
                                  [32m+[0m [0mvalue = "[parameters('azurepolicy')]"
                                }
                              [32m+[0m [0mexcludedNamespaces = {
                                  [32m+[0m [0mvalue = [
                                      [32m+[0m [0m"kube-system",
                                      [32m+[0m [0m"gatekeeper-system",
                                      [32m+[0m [0m"azure-arc",
                                      [32m+[0m [0m"cluster-baseline-setting",
                                    ]
                                }
                            }
                          [32m+[0m [0mpolicyDefinitionId = "[if(equals(parameters('azurePolicyInitiative'), 'Baseline'), variables('policySetBaseline'), variables('policySetRestrictive'))]"
                        }
                      [32m+[0m [0mtype       = "Microsoft.Authorization/policyAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[and(parameters('enableAzureRBAC'), not(empty(parameters('adminPrincipalId'))))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'aksadmin', variables('buildInAKSRBACClusterAdmin'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[parameters('adminPrincipalId')]"
                          [32m+[0m [0mprincipalType    = "User"
                          [32m+[0m [0mroleDefinitionId = "[variables('buildInAKSRBACClusterAdmin')]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.ContainerService/managedClusters/{0}', format('aks-{0}', parameters('resourceName')))]"
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-05-01-preview"
                      [32m+[0m [0mcondition  = "[and(variables('createLaw'), parameters('omsagent'))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]",
                        ]
                      [32m+[0m [0mname       = "aksDiags"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mcopy        = [
                              [32m+[0m [0m{
                                  [32m+[0m [0mcount = "[length(parameters('AksDiagCategories'))]"
                                  [32m+[0m [0minput = {
                                      [32m+[0m [0mcategory = "[parameters('AksDiagCategories')[copyIndex('logs')]]"
                                      [32m+[0m [0menabled  = true
                                    }
                                  [32m+[0m [0mname  = "logs"
                                },
                            ]
                          [32m+[0m [0mmetrics     = [
                              [32m+[0m [0m{
                                  [32m+[0m [0mcategory = "AllMetrics"
                                  [32m+[0m [0menabled  = true
                                },
                            ]
                          [32m+[0m [0mworkspaceId = "[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.ContainerService/managedClusters/{0}', format('aks-{0}', parameters('resourceName')))]"
                      [32m+[0m [0mtype       = "Microsoft.Insights/diagnosticSettings"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-06-01"
                      [32m+[0m [0mcondition  = "[variables('createLaw')]"
                      [32m+[0m [0mlocation   = "[parameters('location')]"
                      [32m+[0m [0mname       = "[variables('aks_law_name')]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mretentionInDays = "[parameters('retentionInDays')]"
                        }
                      [32m+[0m [0mtype       = "Microsoft.OperationalInsights/workspaces"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2021-04-01-preview"
                      [32m+[0m [0mcondition  = "[parameters('omsagent')]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                        ]
                      [32m+[0m [0mname       = "[guid(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName'))), 'omsagent', variables('MonitoringMetricsPublisherRole'))]"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mprincipalId      = "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))).addonProfiles.omsagent.identity.objectId]"
                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                          [32m+[0m [0mroleDefinitionId = "[variables('MonitoringMetricsPublisherRole')]"
                        }
                      [32m+[0m [0mscope      = "[format('Microsoft.ContainerService/managedClusters/{0}', format('aks-{0}', parameters('resourceName')))]"
                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion    = "2020-10-01"
                      [32m+[0m [0mcondition     = "[not(empty(parameters('byoAKSSubnetId')))]"
                      [32m+[0m [0mdependsOn     = [
                          [32m+[0m [0m"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-aks-{0}', parameters('resourceName')))]",
                        ]
                      [32m+[0m [0mname          = "addAksNetContributor"
                      [32m+[0m [0mproperties    = {
                          [32m+[0m [0mexpressionEvaluationOptions = {
                              [32m+[0m [0mscope = "inner"
                            }
                          [32m+[0m [0mmode                        = "Incremental"
                          [32m+[0m [0mparameters                  = {
                              [32m+[0m [0mbyoAKSSubnetId            = {
                                  [32m+[0m [0mvalue = "[parameters('byoAKSSubnetId')]"
                                }
                              [32m+[0m [0muser_identity_name        = {
                                  [32m+[0m [0mvalue = "[format('id-aks-{0}', parameters('resourceName'))]"
                                }
                              [32m+[0m [0muser_identity_principalId = {
                                  [32m+[0m [0mvalue = "[if(variables('aks_byo_identity'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-aks-{0}', parameters('resourceName'))), '2018-11-30').principalId, '')]"
                                }
                              [32m+[0m [0muser_identity_rg          = {
                                  [32m+[0m [0mvalue = "[resourceGroup().name]"
                                }
                            }
                          [32m+[0m [0mtemplate                    = {
                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                              [32m+[0m [0mmetadata       = {
                                  [32m+[0m [0m_generator = {
                                      [32m+[0m [0mname         = "bicep"
                                      [32m+[0m [0mtemplateHash = "9856435912518899296"
                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                    }
                                }
                              [32m+[0m [0mparameters     = {
                                  [32m+[0m [0mbyoAKSSubnetId            = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0muser_identity_name        = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0muser_identity_principalId = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0muser_identity_rg          = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                }
                              [32m+[0m [0mresources      = [
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-04-01-preview"
                                      [32m+[0m [0mname       = "[guid(parameters('user_identity_principalId'), variables('existingAksSubnetName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mprincipalId      = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('user_identity_rg')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('user_identity_name')), '2018-11-30').principalId]"
                                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                                          [32m+[0m [0mroleDefinitionId = "[variables('networkContributorRole')]"
                                        }
                                      [32m+[0m [0mscope      = "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', variables('existingAksVnetName'), variables('existingAksSubnetName'))]"
                                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                                    },
                                ]
                              [32m+[0m [0mvariables      = {
                                  [32m+[0m [0mexistingAksSubnetName  = "[if(not(empty(parameters('byoAKSSubnetId'))), split(parameters('byoAKSSubnetId'), '/')[10], '')]"
                                  [32m+[0m [0mexistingAksVnetName    = "[if(not(empty(parameters('byoAKSSubnetId'))), split(parameters('byoAKSSubnetId'), '/')[8], '')]"
                                  [32m+[0m [0mnetworkContributorRole = "[resourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]"
                                }
                            }
                        }
                      [32m+[0m [0mresourceGroup = "[variables('existingAksVnetRG')]"
                      [32m+[0m [0mtype          = "Microsoft.Resources/deployments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2020-10-01"
                      [32m+[0m [0mcondition  = "[parameters('custom_vnet')]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.KeyVault/vaults', variables('akvName'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-aks-{0}', parameters('resourceName')))]",
                        ]
                      [32m+[0m [0mname       = "network"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mexpressionEvaluationOptions = {
                              [32m+[0m [0mscope = "inner"
                            }
                          [32m+[0m [0mmode                        = "Incremental"
                          [32m+[0m [0mparameters                  = {
                              [32m+[0m [0mCreateNsgFlowLogs                 = {
                                  [32m+[0m [0mvalue = "[and(parameters('CreateNetworkSecurityGroups'), parameters('CreateNetworkSecurityGroupFlowLogs'))]"
                                }
                              [32m+[0m [0macrAgentPoolSubnetAddressPrefix   = {
                                  [32m+[0m [0mvalue = "[parameters('acrAgentPoolSubnetAddressPrefix')]"
                                }
                              [32m+[0m [0macrPrivatePool                    = {
                                  [32m+[0m [0mvalue = "[parameters('acrPrivatePool')]"
                                }
                              [32m+[0m [0maksPrincipleId                    = {
                                  [32m+[0m [0mvalue = "[if(variables('aks_byo_identity'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-aks-{0}', parameters('resourceName'))), '2018-11-30').principalId, '')]"
                                }
                              [32m+[0m [0mavailabilityZones                 = {
                                  [32m+[0m [0mvalue = "[parameters('availabilityZones')]"
                                }
                              [32m+[0m [0mazureFirewalls                    = {
                                  [32m+[0m [0mvalue = "[parameters('azureFirewalls')]"
                                }
                              [32m+[0m [0mbastion                           = {
                                  [32m+[0m [0mvalue = "[parameters('bastion')]"
                                }
                              [32m+[0m [0mbastionSubnetAddressPrefix        = {
                                  [32m+[0m [0mvalue = "[parameters('bastionSubnetAddressPrefix')]"
                                }
                              [32m+[0m [0mingressApplicationGateway         = {
                                  [32m+[0m [0mvalue = "[parameters('ingressApplicationGateway')]"
                                }
                              [32m+[0m [0mingressApplicationGatewayPublic   = {
                                  [32m+[0m [0mvalue = "[empty(parameters('privateIpApplicationGateway'))]"
                                }
                              [32m+[0m [0mlocation                          = {
                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                }
                              [32m+[0m [0mnatGateway                        = {
                                  [32m+[0m [0mvalue = "[parameters('createNatGateway')]"
                                }
                              [32m+[0m [0mnatGatewayIdleTimeoutMins         = {
                                  [32m+[0m [0mvalue = "[parameters('natGwIdleTimeout')]"
                                }
                              [32m+[0m [0mnatGatewayPublicIps               = {
                                  [32m+[0m [0mvalue = "[parameters('natGwIpCount')]"
                                }
                              [32m+[0m [0mnetworkSecurityGroups             = {
                                  [32m+[0m [0mvalue = "[parameters('CreateNetworkSecurityGroups')]"
                                }
                              [32m+[0m [0mprivateLinkAcrId                  = {
                                  [32m+[0m [0mvalue = "[if(and(parameters('privateLinks'), not(empty(parameters('registries_sku')))), resourceId('Microsoft.ContainerRegistry/registries', variables('acrName')), '')]"
                                }
                              [32m+[0m [0mprivateLinkAkvId                  = {
                                  [32m+[0m [0mvalue = "[if(and(parameters('privateLinks'), parameters('createKV')), resourceId('Microsoft.KeyVault/vaults', variables('akvName')), '')]"
                                }
                              [32m+[0m [0mprivateLinkSubnetAddressPrefix    = {
                                  [32m+[0m [0mvalue = "[parameters('privateLinkSubnetAddressPrefix')]"
                                }
                              [32m+[0m [0mprivateLinks                      = {
                                  [32m+[0m [0mvalue = "[parameters('privateLinks')]"
                                }
                              [32m+[0m [0mresourceName                      = {
                                  [32m+[0m [0mvalue = "[parameters('resourceName')]"
                                }
                              [32m+[0m [0mvnetAddressPrefix                 = {
                                  [32m+[0m [0mvalue = "[parameters('vnetAddressPrefix')]"
                                }
                              [32m+[0m [0mvnetAksSubnetAddressPrefix        = {
                                  [32m+[0m [0mvalue = "[parameters('vnetAksSubnetAddressPrefix')]"
                                }
                              [32m+[0m [0mvnetAppGatewaySubnetAddressPrefix = {
                                  [32m+[0m [0mvalue = "[parameters('vnetAppGatewaySubnetAddressPrefix')]"
                                }
                              [32m+[0m [0mvnetFirewallSubnetAddressPrefix   = {
                                  [32m+[0m [0mvalue = "[parameters('vnetFirewallSubnetAddressPrefix')]"
                                }
                              [32m+[0m [0mworkspaceName                     = {
                                  [32m+[0m [0mvalue = "[variables('aks_law_name')]"
                                }
                              [32m+[0m [0mworkspaceResourceGroupName        = {
                                  [32m+[0m [0mvalue = "[resourceGroup().name]"
                                }
                            }
                          [32m+[0m [0mtemplate                    = {
                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                              [32m+[0m [0mmetadata       = {
                                  [32m+[0m [0m_generator = {
                                      [32m+[0m [0mname         = "bicep"
                                      [32m+[0m [0mtemplateHash = "9524789084976860810"
                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                    }
                                }
                              [32m+[0m [0moutputs        = {
                                  [32m+[0m [0macrPoolSubnetId     = {
                                      [32m+[0m [0mtype  = "string"
                                      [32m+[0m [0mvalue = "[if(parameters('acrPrivatePool'), format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('acrpool_subnet_name')), '')]"
                                    }
                                  [32m+[0m [0maksSubnetId         = {
                                      [32m+[0m [0mtype  = "string"
                                      [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('aks_subnet_name'))]"
                                    }
                                  [32m+[0m [0mappGwSubnetId       = {
                                      [32m+[0m [0mtype  = "string"
                                      [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('appgw_subnet_name'))]"
                                    }
                                  [32m+[0m [0mfwSubnetId          = {
                                      [32m+[0m [0mtype  = "string"
                                      [32m+[0m [0mvalue = "[if(parameters('azureFirewalls'), format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('fw_subnet_name')), '')]"
                                    }
                                  [32m+[0m [0mprivateLinkSubnetId = {
                                      [32m+[0m [0mtype  = "string"
                                      [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('private_link_subnet_name'))]"
                                    }
                                  [32m+[0m [0mvnetId              = {
                                      [32m+[0m [0mtype  = "string"
                                      [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                                    }
                                  [32m+[0m [0mvnetName            = {
                                      [32m+[0m [0mtype  = "string"
                                      [32m+[0m [0mvalue = "[variables('vnetName')]"
                                    }
                                }
                              [32m+[0m [0mparameters     = {
                                  [32m+[0m [0mCreateNsgFlowLogs                 = {
                                      [32m+[0m [0mdefaultValue = false
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0macrAgentPoolSubnetAddressPrefix   = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0macrPrivatePool                    = {
                                      [32m+[0m [0mdefaultValue = false
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0maksPrincipleId                    = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mavailabilityZones                 = {
                                      [32m+[0m [0mdefaultValue = []
                                      [32m+[0m [0mmetadata     = {
                                          [32m+[0m [0mdescription = "Used by the Bastion Public IP"
                                        }
                                      [32m+[0m [0mtype         = "array"
                                    }
                                  [32m+[0m [0mazureFirewalls                    = {
                                      [32m+[0m [0mdefaultValue = false
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0mbastion                           = {
                                      [32m+[0m [0mdefaultValue = false
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0mbastionHostName                   = {
                                      [32m+[0m [0mdefaultValue = "[format('bas-{0}', parameters('resourceName'))]"
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mbastionSku                        = {
                                      [32m+[0m [0mallowedValues = [
                                          [32m+[0m [0m"Standard",
                                          [32m+[0m [0m"Basic",
                                        ]
                                      [32m+[0m [0mdefaultValue  = "Standard"
                                      [32m+[0m [0mtype          = "string"
                                    }
                                  [32m+[0m [0mbastionSubnetAddressPrefix        = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mingressApplicationGateway         = {
                                      [32m+[0m [0mdefaultValue = false
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0mingressApplicationGatewayPublic   = {
                                      [32m+[0m [0mdefaultValue = false
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0mlocation                          = {
                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mnatGateway                        = {
                                      [32m+[0m [0mdefaultValue = false
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0mnatGatewayIdleTimeoutMins         = {
                                      [32m+[0m [0mtype = "int"
                                    }
                                  [32m+[0m [0mnatGatewayPublicIps               = {
                                      [32m+[0m [0mdefaultValue = 2
                                      [32m+[0m [0mtype         = "int"
                                    }
                                  [32m+[0m [0mnetworkSecurityGroups             = {
                                      [32m+[0m [0mdefaultValue = true
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0mprivateLinkAcrId                  = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mprivateLinkAkvId                  = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mprivateLinkSubnetAddressPrefix    = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mprivateLinks                      = {
                                      [32m+[0m [0mdefaultValue = false
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0mresourceName                      = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0mvnetAddressPrefix                 = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0mvnetAksSubnetAddressPrefix        = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0mvnetAppGatewaySubnetAddressPrefix = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mvnetFirewallSubnetAddressPrefix   = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mworkspaceName                     = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mworkspaceResourceGroupName        = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                }
                              [32m+[0m [0mresources      = [
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-02-01"
                                      [32m+[0m [0mcondition  = "[parameters('azureFirewalls')]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'calcAzFwIp')]",
                                        ]
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[variables('routeFwTableName')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mroutes = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mname       = "AKSNodesEgress"
                                                  [32m+[0m [0mproperties = {
                                                      [32m+[0m [0maddressPrefix    = "0.0.0.0/1"
                                                      [32m+[0m [0mnextHopIpAddress = "[if(parameters('azureFirewalls'), reference(resourceId('Microsoft.Resources/deployments', 'calcAzFwIp'), '2020-10-01').outputs.FirewallPrivateIp.value, null())]"
                                                      [32m+[0m [0mnextHopType      = "VirtualAppliance"
                                                    }
                                                },
                                            ]
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/routeTables"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-02-01"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/natGateways', variables('natGwName'))]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'nsgAcrPool')]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'nsgAks')]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'nsgAppGw')]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'nsgBastion')]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'nsgPrivateLinks')]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/routeTables', variables('routeFwTableName'))]",
                                        ]
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[variables('vnetName')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0maddressSpace = {
                                              [32m+[0m [0maddressPrefixes = [
                                                  [32m+[0m [0m"[parameters('vnetAddressPrefix')]",
                                                ]
                                            }
                                          [32m+[0m [0msubnets      = "[if(parameters('ingressApplicationGateway'), concat(array(if(parameters('bastion'), concat(array(if(parameters('acrPrivatePool'), concat(array(if(parameters('privateLinks'), concat(array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('private_link_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgPrivateLinks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('private_link_baseSubnet')))), array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('acrpool_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAcrPool'), '2020-10-01').outputs.nsgSubnetObj.value), variables('acrpool_baseSubnet')))), array(if(parameters('privateLinks'), concat(array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('private_link_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgPrivateLinks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('private_link_baseSubnet')))), array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))))))), array(if(and(parameters('bastion'), parameters('networkSecurityGroups')), union(variables('bastion_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgBastion'), '2020-10-01').outputs.nsgSubnetObj.value), variables('bastion_baseSubnet')))), array(if(parameters('acrPrivatePool'), concat(array(if(parameters('privateLinks'), concat(array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('private_link_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgPrivateLinks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('private_link_baseSubnet')))), array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('acrpool_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAcrPool'), '2020-10-01').outputs.nsgSubnetObj.value), variables('acrpool_baseSubnet')))), array(if(parameters('privateLinks'), concat(array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('private_link_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgPrivateLinks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('private_link_baseSubnet')))), array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))))))))), array(if(and(parameters('ingressApplicationGateway'), parameters('networkSecurityGroups')), union(variables('appgw_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAppGw'), '2020-10-01').outputs.nsgSubnetObj.value), variables('appgw_baseSubnet')))), array(if(parameters('bastion'), concat(array(if(parameters('acrPrivatePool'), concat(array(if(parameters('privateLinks'), concat(array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('private_link_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgPrivateLinks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('private_link_baseSubnet')))), array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('acrpool_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAcrPool'), '2020-10-01').outputs.nsgSubnetObj.value), variables('acrpool_baseSubnet')))), array(if(parameters('privateLinks'), concat(array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('private_link_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgPrivateLinks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('private_link_baseSubnet')))), array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))))))), array(if(and(parameters('bastion'), parameters('networkSecurityGroups')), union(variables('bastion_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgBastion'), '2020-10-01').outputs.nsgSubnetObj.value), variables('bastion_baseSubnet')))), array(if(parameters('acrPrivatePool'), concat(array(if(parameters('privateLinks'), concat(array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('private_link_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgPrivateLinks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('private_link_baseSubnet')))), array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('acrpool_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAcrPool'), '2020-10-01').outputs.nsgSubnetObj.value), variables('acrpool_baseSubnet')))), array(if(parameters('privateLinks'), concat(array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))), array(if(and(parameters('privateLinks'), parameters('networkSecurityGroups')), union(variables('private_link_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgPrivateLinks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('private_link_baseSubnet')))), array(if(parameters('azureFirewalls'), concat(array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))), array(variables('fw_subnet'))), array(if(parameters('networkSecurityGroups'), union(variables('aks_baseSubnet'), reference(resourceId('Microsoft.Resources/deployments', 'nsgAks'), '2020-10-01').outputs.nsgSubnetObj.value), variables('aks_baseSubnet'))))))))))))]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/virtualNetworks"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-04-01-preview"
                                      [32m+[0m [0mcondition  = "[not(empty(parameters('aksPrincipleId')))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                                        ]
                                      [32m+[0m [0mname       = "[format('{0}/{1}/Microsoft.Authorization/{2}', variables('vnetName'), variables('aks_subnet_name'), guid(resourceGroup().id, variables('vnetName'), variables('aks_subnet_name')))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mprincipalId      = "[parameters('aksPrincipleId')]"
                                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                                          [32m+[0m [0mroleDefinitionId = "[variables('networkContributorRole')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/virtualNetworks/subnets/providers/roleAssignments"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-08-01"
                                      [32m+[0m [0mcondition  = "[not(empty(parameters('privateLinkAcrId')))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                                        ]
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[variables('privateLinkAcrName')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcustomNetworkInterfaceName    = "[format('nic-{0}', variables('privateLinkAcrName'))]"
                                          [32m+[0m [0mprivateLinkServiceConnections = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mname       = "Acr-Connection"
                                                  [32m+[0m [0mproperties = {
                                                      [32m+[0m [0mgroupIds             = [
                                                          [32m+[0m [0m"registry",
                                                        ]
                                                      [32m+[0m [0mprivateLinkServiceId = "[parameters('privateLinkAcrId')]"
                                                    }
                                                },
                                            ]
                                          [32m+[0m [0msubnet                        = {
                                              [32m+[0m [0mid = "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('private_link_subnet_name'))]"
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/privateEndpoints"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-06-01"
                                      [32m+[0m [0mcondition  = "[not(empty(parameters('privateLinkAcrId')))]"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "privatelink.azurecr.io"
                                      [32m+[0m [0mtype       = "Microsoft.Network/privateDnsZones"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-06-01"
                                      [32m+[0m [0mcondition  = "[not(empty(parameters('privateLinkAcrId')))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                                        ]
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('{0}/{1}', 'privatelink.azurecr.io', variables('privateDnsAcrLinkName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mregistrationEnabled = false
                                          [32m+[0m [0mvirtualNetwork      = {
                                              [32m+[0m [0mid = "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/privateDnsZones/virtualNetworkLinks"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-08-01"
                                      [32m+[0m [0mcondition  = "[not(empty(parameters('privateLinkAcrId')))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/privateEndpoints', variables('privateLinkAcrName'))]",
                                        ]
                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('privateLinkAcrName'), 'default')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mprivateDnsZoneConfigs = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mname       = "vnet-pl-acr"
                                                  [32m+[0m [0mproperties = {
                                                      [32m+[0m [0mprivateDnsZoneId = "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]"
                                                    }
                                                },
                                            ]
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-08-01"
                                      [32m+[0m [0mcondition  = "[not(empty(parameters('privateLinkAkvId')))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                                        ]
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[variables('privateLinkAkvName')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcustomNetworkInterfaceName    = "[format('nic-{0}', variables('privateLinkAkvName'))]"
                                          [32m+[0m [0mprivateLinkServiceConnections = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mname       = "Akv-Connection"
                                                  [32m+[0m [0mproperties = {
                                                      [32m+[0m [0mgroupIds             = [
                                                          [32m+[0m [0m"vault",
                                                        ]
                                                      [32m+[0m [0mprivateLinkServiceId = "[parameters('privateLinkAkvId')]"
                                                    }
                                                },
                                            ]
                                          [32m+[0m [0msubnet                        = {
                                              [32m+[0m [0mid = "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('private_link_subnet_name'))]"
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/privateEndpoints"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-06-01"
                                      [32m+[0m [0mcondition  = "[not(empty(parameters('privateLinkAkvId')))]"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "privatelink.vaultcore.azure.net"
                                      [32m+[0m [0mtype       = "Microsoft.Network/privateDnsZones"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-06-01"
                                      [32m+[0m [0mcondition  = "[not(empty(parameters('privateLinkAkvId')))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                                        ]
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('{0}/{1}', 'privatelink.vaultcore.azure.net', variables('privateDnsAkvLinkName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mregistrationEnabled = false
                                          [32m+[0m [0mvirtualNetwork      = {
                                              [32m+[0m [0mid = "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/privateDnsZones/virtualNetworkLinks"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-08-01"
                                      [32m+[0m [0mcondition  = "[not(empty(parameters('privateLinkAkvId')))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/privateEndpoints', variables('privateLinkAkvName'))]",
                                        ]
                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('privateLinkAkvName'), 'default')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mprivateDnsZoneConfigs = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mname       = "vnet-pl-akv"
                                                  [32m+[0m [0mproperties = {
                                                      [32m+[0m [0mprivateDnsZoneId = "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.vaultcore.azure.net')]"
                                                    }
                                                },
                                            ]
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/privateEndpoints/privateDnsZoneGroups"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-03-01"
                                      [32m+[0m [0mcondition  = "[parameters('bastion')]"
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[variables('publicIpAddressName')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mpublicIPAllocationMethod = "Static"
                                        }
                                      [32m+[0m [0msku        = {
                                          [32m+[0m [0mname = "Standard"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/publicIPAddresses"
                                      [32m+[0m [0mzones      = "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), createArray())]"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                      [32m+[0m [0mcondition  = "[parameters('bastion')]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                                        ]
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[parameters('bastionHostName')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0menableTunneling  = true
                                          [32m+[0m [0mipConfigurations = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mname       = "IpConf"
                                                  [32m+[0m [0mproperties = {
                                                      [32m+[0m [0mpublicIPAddress = {
                                                          [32m+[0m [0mid = "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))]"
                                                        }
                                                      [32m+[0m [0msubnet          = {
                                                          [32m+[0m [0mid = "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('bastion_subnet_name'))]"
                                                        }
                                                    }
                                                },
                                            ]
                                        }
                                      [32m+[0m [0msku        = {
                                          [32m+[0m [0mname = "[parameters('bastionSku')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/bastionHosts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-08-01"
                                      [32m+[0m [0mcondition  = "[and(parameters('CreateNsgFlowLogs'), parameters('networkSecurityGroups'))]"
                                      [32m+[0m [0mkind       = "StorageV2"
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[variables('flowLogStorageName')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mminimumTlsVersion = "TLS1_2"
                                        }
                                      [32m+[0m [0msku        = {
                                          [32m+[0m [0mname = "Standard_LRS"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Storage/storageAccounts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-08-01"
                                      [32m+[0m [0mcondition  = "[parameters('natGateway')]"
                                      [32m+[0m [0mcopy       = {
                                          [32m+[0m [0mcount = "[length(range(0, parameters('natGatewayPublicIps')))]"
                                          [32m+[0m [0mname  = "natGwIp"
                                        }
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[format('pip-{0}-{1}', variables('natGwName'), add(range(0, parameters('natGatewayPublicIps'))[copyIndex()], 1))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mpublicIPAllocationMethod = "Static"
                                        }
                                      [32m+[0m [0msku        = {
                                          [32m+[0m [0mname = "Standard"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/publicIPAddresses"
                                      [32m+[0m [0mzones      = "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), createArray())]"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-08-01"
                                      [32m+[0m [0mcondition  = "[parameters('natGateway')]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"natGwIp",
                                        ]
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[variables('natGwName')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcopy                 = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mcount = "[length(range(0, parameters('natGatewayPublicIps')))]"
                                                  [32m+[0m [0minput = {
                                                      [32m+[0m [0mid = "[resourceId('Microsoft.Network/publicIPAddresses', format('pip-{0}-{1}', variables('natGwName'), add(range(0, parameters('natGatewayPublicIps'))[range(0, parameters('natGatewayPublicIps'))[copyIndex('publicIpAddresses')]], 1)))]"
                                                    }
                                                  [32m+[0m [0mname  = "publicIpAddresses"
                                                },
                                            ]
                                          [32m+[0m [0midleTimeoutInMinutes = "[parameters('natGatewayIdleTimeoutMins')]"
                                        }
                                      [32m+[0m [0msku        = {
                                          [32m+[0m [0mname = "Standard"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/natGateways"
                                      [32m+[0m [0mzones      = "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), createArray())]"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-10-01"
                                      [32m+[0m [0mcondition  = "[parameters('azureFirewalls')]"
                                      [32m+[0m [0mname       = "calcAzFwIp"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                              [32m+[0m [0mscope = "inner"
                                            }
                                          [32m+[0m [0mmode                        = "Incremental"
                                          [32m+[0m [0mparameters                  = {
                                              [32m+[0m [0mvnetFirewallSubnetAddressPrefix = {
                                                  [32m+[0m [0mvalue = "[parameters('vnetFirewallSubnetAddressPrefix')]"
                                                }
                                            }
                                          [32m+[0m [0mtemplate                    = {
                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                              [32m+[0m [0mmetadata       = {
                                                  [32m+[0m [0m_generator = {
                                                      [32m+[0m [0mname         = "bicep"
                                                      [32m+[0m [0mtemplateHash = "5758669683845626391"
                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                    }
                                                }
                                              [32m+[0m [0moutputs        = {
                                                  [32m+[0m [0mFirewallPrivateIp = {
                                                      [32m+[0m [0mtype  = "string"
                                                      [32m+[0m [0mvalue = "[format('{0}.{1}.{2}.{3}', variables('subnetOctets')[0], variables('subnetOctets')[1], variables('subnetOctets')[2], variables('hostIdOctet'))]"
                                                    }
                                                }
                                              [32m+[0m [0mparameters     = {
                                                  [32m+[0m [0mvnetFirewallSubnetAddressPrefix = {
                                                      [32m+[0m [0mmetadata = {
                                                          [32m+[0m [0mdescription = "A subnet address for the Azure Firewall"
                                                        }
                                                      [32m+[0m [0mtype     = "string"
                                                    }
                                                }
                                              [32m+[0m [0mresources      = []
                                              [32m+[0m [0mvariables      = {
                                                  [32m+[0m [0mhostIdOctet  = "4"
                                                  [32m+[0m [0msubnetOctets = "[split(parameters('vnetFirewallSubnetAddressPrefix'), '.')]"
                                                }
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Resources/deployments"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-10-01"
                                      [32m+[0m [0mcondition  = "[parameters('networkSecurityGroups')]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Storage/storageAccounts', variables('flowLogStorageName'))]",
                                        ]
                                      [32m+[0m [0mname       = "nsgAks"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                              [32m+[0m [0mscope = "inner"
                                            }
                                          [32m+[0m [0mmode                        = "Incremental"
                                          [32m+[0m [0mparameters                  = {
                                              [32m+[0m [0mFlowLogStorageAccountId  = {
                                                  [32m+[0m [0mvalue = "[if(parameters('CreateNsgFlowLogs'), resourceId('Microsoft.Storage/storageAccounts', variables('flowLogStorageName')), '')]"
                                                }
                                              [32m+[0m [0mlocation                 = {
                                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                                }
                                              [32m+[0m [0mresourceName             = {
                                                  [32m+[0m [0mvalue = "[format('{0}-{1}', variables('aks_subnet_name'), parameters('resourceName'))]"
                                                }
                                              [32m+[0m [0mruleInAllowInternetHttp  = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mruleInAllowInternetHttps = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mruleInDenySsh            = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mworkspaceId              = {
                                                  [32m+[0m [0mvalue = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2021-06-01').customerId]"
                                                }
                                              [32m+[0m [0mworkspaceRegion          = {
                                                  [32m+[0m [0mvalue = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2021-06-01', 'full').location]"
                                                }
                                              [32m+[0m [0mworkspaceResourceId      = {
                                                  [32m+[0m [0mvalue = "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
                                                }
                                            }
                                          [32m+[0m [0mtemplate                    = {
                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                              [32m+[0m [0mmetadata       = {
                                                  [32m+[0m [0m_generator = {
                                                      [32m+[0m [0mname         = "bicep"
                                                      [32m+[0m [0mtemplateHash = "8961724704431716563"
                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                    }
                                                }
                                              [32m+[0m [0moutputs        = {
                                                  [32m+[0m [0mnsgId        = {
                                                      [32m+[0m [0mtype  = "string"
                                                      [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                    }
                                                  [32m+[0m [0mnsgSubnetObj = {
                                                      [32m+[0m [0mtype  = "object"
                                                      [32m+[0m [0mvalue = {
                                                          [32m+[0m [0mproperties = {
                                                              [32m+[0m [0mnetworkSecurityGroup = {
                                                                  [32m+[0m [0mid = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                              [32m+[0m [0mparameters     = {
                                                  [32m+[0m [0mFlowLogStorageAccountId      = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mFlowLogTrafficAnalytics      = {
                                                      [32m+[0m [0mdefaultValue = "[not(empty(parameters('FlowLogStorageAccountId')))]"
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mNsgDiagnosticCategories      = {
                                                      [32m+[0m [0mdefaultValue = [
                                                          [32m+[0m [0m"NetworkSecurityGroupEvent",
                                                          [32m+[0m [0m"NetworkSecurityGroupRuleCounter",
                                                        ]
                                                      [32m+[0m [0mtype         = "array"
                                                    }
                                                  [32m+[0m [0mlocation                     = {
                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mresourceName                 = {
                                                      [32m+[0m [0mtype = "string"
                                                    }
                                                  [32m+[0m [0mruleInAllowAzureLoadBalancer = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowBastionHostComms  = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowGwManagement      = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowInternetHttp      = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowInternetHttps     = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInDenyInternet           = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInDenySsh                = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInGwManagementPort       = {
                                                      [32m+[0m [0mdefaultValue = "443,65200-65535"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mruleOutAllowBastionComms     = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mworkspaceId                  = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mworkspaceRegion              = {
                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mworkspaceResourceId          = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                }
                                              [32m+[0m [0mresources      = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                                      [32m+[0m [0mname       = "[variables('nsgName')]"
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowGwManagement')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_AppGatewayManagement')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                   = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix = "*"
                                                          [32m+[0m [0mdestinationPortRange     = "[parameters('ruleInGwManagementPort')]"
                                                          [32m+[0m [0mdirection                = "Inbound"
                                                          [32m+[0m [0mpriority                 = 110
                                                          [32m+[0m [0mprotocol                 = "*"
                                                          [32m+[0m [0msourceAddressPrefix      = "GatewayManager"
                                                          [32m+[0m [0msourcePortRange          = "*"
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowAzureLoadBalancer')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_AzureLoadBalancer')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRange       = "*"
                                                          [32m+[0m [0mdestinationPortRanges      = []
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 120
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "AzureLoadBalancer"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInDenyInternet')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Deny_AllInboundInternet')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Deny"
                                                          [32m+[0m [0mdescription                = "Azure infrastructure communication"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRange       = "*"
                                                          [32m+[0m [0mdestinationPortRanges      = []
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 4096
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowInternetHttp')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Internet_Http')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"80",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 200
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowInternetHttps')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Internet_Https')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"443",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 210
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowBastionHostComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Bastion_Host_Communication')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"8080",
                                                              [32m+[0m [0m"5701",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 700
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "VirtualNetwork"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_SshRdp_Outbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"22",
                                                              [32m+[0m [0m"3389",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 200
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Azure_Cloud_Outbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "AzureCloud"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"443",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 210
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Bastion_Communication')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"8080",
                                                              [32m+[0m [0m"5701",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 220
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "VirtualNetwork"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Get_Session_Info')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "Internet"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"80",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 230
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInDenySsh')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'DenySshInbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Deny"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"22",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 100
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2021-05-01-preview"
                                                      [32m+[0m [0mcondition  = "[not(empty(parameters('workspaceResourceId')))]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('diags-{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0mcopy        = [
                                                              [32m+[0m [0m{
                                                                  [32m+[0m [0mcount = "[length(parameters('NsgDiagnosticCategories'))]"
                                                                  [32m+[0m [0minput = {
                                                                      [32m+[0m [0mcategory = "[parameters('NsgDiagnosticCategories')[copyIndex('logs')]]"
                                                                      [32m+[0m [0menabled  = true
                                                                    }
                                                                  [32m+[0m [0mname  = "logs"
                                                                },
                                                            ]
                                                          [32m+[0m [0mworkspaceId = "[parameters('workspaceResourceId')]"
                                                        }
                                                      [32m+[0m [0mscope      = "[format('Microsoft.Network/networkSecurityGroups/{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mtype       = "Microsoft.Insights/diagnosticSettings"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion    = "2020-10-01"
                                                      [32m+[0m [0mcondition     = "[not(empty(parameters('FlowLogStorageAccountId')))]"
                                                      [32m+[0m [0mdependsOn     = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname          = "[format('flow-{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mproperties    = {
                                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                                              [32m+[0m [0mscope = "inner"
                                                            }
                                                          [32m+[0m [0mmode                        = "Incremental"
                                                          [32m+[0m [0mparameters                  = {
                                                              [32m+[0m [0mlocation            = {
                                                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                                                }
                                                              [32m+[0m [0mname                = {
                                                                  [32m+[0m [0mvalue = "[format('flowNsg-{0}', variables('nsgName'))]"
                                                                }
                                                              [32m+[0m [0mnsgId               = {
                                                                  [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                                }
                                                              [32m+[0m [0mstorageId           = {
                                                                  [32m+[0m [0mvalue = "[parameters('FlowLogStorageAccountId')]"
                                                                }
                                                              [32m+[0m [0mtrafficAnalytics    = {
                                                                  [32m+[0m [0mvalue = "[parameters('FlowLogTrafficAnalytics')]"
                                                                }
                                                              [32m+[0m [0mworkspaceId         = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceId')]"
                                                                }
                                                              [32m+[0m [0mworkspaceRegion     = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceRegion')]"
                                                                }
                                                              [32m+[0m [0mworkspaceResourceId = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceResourceId')]"
                                                                }
                                                            }
                                                          [32m+[0m [0mtemplate                    = {
                                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                                              [32m+[0m [0mmetadata       = {
                                                                  [32m+[0m [0m_generator = {
                                                                      [32m+[0m [0mname         = "bicep"
                                                                      [32m+[0m [0mtemplateHash = "319601346626837749"
                                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                                    }
                                                                }
                                                              [32m+[0m [0mparameters     = {
                                                                  [32m+[0m [0mlocation                 = {
                                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mname                     = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mnsgId                    = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mstorageId                = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mtrafficAnalytics         = {
                                                                      [32m+[0m [0mtype = "bool"
                                                                    }
                                                                  [32m+[0m [0mtrafficAnalyticsInterval = {
                                                                      [32m+[0m [0mdefaultValue = 60
                                                                      [32m+[0m [0mtype         = "int"
                                                                    }
                                                                  [32m+[0m [0mworkspaceId              = {
                                                                      [32m+[0m [0mdefaultValue = ""
                                                                      [32m+[0m [0mmetadata     = {
                                                                          [32m+[0m [0mdescription = "The resource guid of the attached workspace."
                                                                        }
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mworkspaceRegion          = {
                                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mworkspaceResourceId      = {
                                                                      [32m+[0m [0mdefaultValue = ""
                                                                      [32m+[0m [0mmetadata     = {
                                                                          [32m+[0m [0mdescription = "Resource Id of the attached workspace."
                                                                        }
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                }
                                                              [32m+[0m [0mresources      = [
                                                                  [32m+[0m [0m{
                                                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                                                      [32m+[0m [0mname       = "[format('NetworkWatcher_{0}/{1}', parameters('location'), parameters('name'))]"
                                                                      [32m+[0m [0mproperties = {
                                                                          [32m+[0m [0menabled                    = true
                                                                          [32m+[0m [0mflowAnalyticsConfiguration = {
                                                                              [32m+[0m [0mnetworkWatcherFlowAnalyticsConfiguration = {
                                                                                  [32m+[0m [0menabled                  = "[parameters('trafficAnalytics')]"
                                                                                  [32m+[0m [0mtrafficAnalyticsInterval = "[parameters('trafficAnalyticsInterval')]"
                                                                                  [32m+[0m [0mworkspaceId              = "[parameters('workspaceId')]"
                                                                                  [32m+[0m [0mworkspaceRegion          = "[parameters('workspaceRegion')]"
                                                                                  [32m+[0m [0mworkspaceResourceId      = "[parameters('workspaceResourceId')]"
                                                                                }
                                                                            }
                                                                          [32m+[0m [0mformat                     = {
                                                                              [32m+[0m [0mtype    = "JSON"
                                                                              [32m+[0m [0mversion = 2
                                                                            }
                                                                          [32m+[0m [0mretentionPolicy            = {
                                                                              [32m+[0m [0mdays    = 2
                                                                              [32m+[0m [0menabled = true
                                                                            }
                                                                          [32m+[0m [0mstorageId                  = "[parameters('storageId')]"
                                                                          [32m+[0m [0mtargetResourceId           = "[parameters('nsgId')]"
                                                                        }
                                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkWatchers/flowLogs"
                                                                    },
                                                                ]
                                                            }
                                                        }
                                                      [32m+[0m [0mresourceGroup = "NetworkWatcherRG"
                                                      [32m+[0m [0mtype          = "Microsoft.Resources/deployments"
                                                    },
                                                ]
                                              [32m+[0m [0mvariables      = {
                                                  [32m+[0m [0mnsgName = "[format('nsg-{0}', parameters('resourceName'))]"
                                                }
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Resources/deployments"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-10-01"
                                      [32m+[0m [0mcondition  = "[and(parameters('acrPrivatePool'), parameters('networkSecurityGroups'))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Storage/storageAccounts', variables('flowLogStorageName'))]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'nsgAks')]",
                                        ]
                                      [32m+[0m [0mname       = "nsgAcrPool"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                              [32m+[0m [0mscope = "inner"
                                            }
                                          [32m+[0m [0mmode                        = "Incremental"
                                          [32m+[0m [0mparameters                  = {
                                              [32m+[0m [0mFlowLogStorageAccountId = {
                                                  [32m+[0m [0mvalue = "[if(parameters('CreateNsgFlowLogs'), resourceId('Microsoft.Storage/storageAccounts', variables('flowLogStorageName')), '')]"
                                                }
                                              [32m+[0m [0mlocation                = {
                                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                                }
                                              [32m+[0m [0mresourceName            = {
                                                  [32m+[0m [0mvalue = "[format('{0}-{1}', variables('acrpool_subnet_name'), parameters('resourceName'))]"
                                                }
                                              [32m+[0m [0mworkspaceId             = {
                                                  [32m+[0m [0mvalue = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2021-06-01').customerId]"
                                                }
                                              [32m+[0m [0mworkspaceRegion         = {
                                                  [32m+[0m [0mvalue = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2021-06-01', 'full').location]"
                                                }
                                              [32m+[0m [0mworkspaceResourceId     = {
                                                  [32m+[0m [0mvalue = "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
                                                }
                                            }
                                          [32m+[0m [0mtemplate                    = {
                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                              [32m+[0m [0mmetadata       = {
                                                  [32m+[0m [0m_generator = {
                                                      [32m+[0m [0mname         = "bicep"
                                                      [32m+[0m [0mtemplateHash = "8961724704431716563"
                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                    }
                                                }
                                              [32m+[0m [0moutputs        = {
                                                  [32m+[0m [0mnsgId        = {
                                                      [32m+[0m [0mtype  = "string"
                                                      [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                    }
                                                  [32m+[0m [0mnsgSubnetObj = {
                                                      [32m+[0m [0mtype  = "object"
                                                      [32m+[0m [0mvalue = {
                                                          [32m+[0m [0mproperties = {
                                                              [32m+[0m [0mnetworkSecurityGroup = {
                                                                  [32m+[0m [0mid = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                              [32m+[0m [0mparameters     = {
                                                  [32m+[0m [0mFlowLogStorageAccountId      = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mFlowLogTrafficAnalytics      = {
                                                      [32m+[0m [0mdefaultValue = "[not(empty(parameters('FlowLogStorageAccountId')))]"
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mNsgDiagnosticCategories      = {
                                                      [32m+[0m [0mdefaultValue = [
                                                          [32m+[0m [0m"NetworkSecurityGroupEvent",
                                                          [32m+[0m [0m"NetworkSecurityGroupRuleCounter",
                                                        ]
                                                      [32m+[0m [0mtype         = "array"
                                                    }
                                                  [32m+[0m [0mlocation                     = {
                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mresourceName                 = {
                                                      [32m+[0m [0mtype = "string"
                                                    }
                                                  [32m+[0m [0mruleInAllowAzureLoadBalancer = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowBastionHostComms  = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowGwManagement      = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowInternetHttp      = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowInternetHttps     = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInDenyInternet           = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInDenySsh                = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInGwManagementPort       = {
                                                      [32m+[0m [0mdefaultValue = "443,65200-65535"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mruleOutAllowBastionComms     = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mworkspaceId                  = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mworkspaceRegion              = {
                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mworkspaceResourceId          = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                }
                                              [32m+[0m [0mresources      = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                                      [32m+[0m [0mname       = "[variables('nsgName')]"
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowGwManagement')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_AppGatewayManagement')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                   = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix = "*"
                                                          [32m+[0m [0mdestinationPortRange     = "[parameters('ruleInGwManagementPort')]"
                                                          [32m+[0m [0mdirection                = "Inbound"
                                                          [32m+[0m [0mpriority                 = 110
                                                          [32m+[0m [0mprotocol                 = "*"
                                                          [32m+[0m [0msourceAddressPrefix      = "GatewayManager"
                                                          [32m+[0m [0msourcePortRange          = "*"
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowAzureLoadBalancer')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_AzureLoadBalancer')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRange       = "*"
                                                          [32m+[0m [0mdestinationPortRanges      = []
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 120
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "AzureLoadBalancer"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInDenyInternet')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Deny_AllInboundInternet')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Deny"
                                                          [32m+[0m [0mdescription                = "Azure infrastructure communication"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRange       = "*"
                                                          [32m+[0m [0mdestinationPortRanges      = []
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 4096
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowInternetHttp')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Internet_Http')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"80",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 200
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowInternetHttps')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Internet_Https')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"443",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 210
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowBastionHostComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Bastion_Host_Communication')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"8080",
                                                              [32m+[0m [0m"5701",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 700
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "VirtualNetwork"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_SshRdp_Outbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"22",
                                                              [32m+[0m [0m"3389",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 200
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Azure_Cloud_Outbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "AzureCloud"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"443",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 210
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Bastion_Communication')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"8080",
                                                              [32m+[0m [0m"5701",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 220
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "VirtualNetwork"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Get_Session_Info')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "Internet"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"80",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 230
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInDenySsh')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'DenySshInbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Deny"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"22",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 100
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2021-05-01-preview"
                                                      [32m+[0m [0mcondition  = "[not(empty(parameters('workspaceResourceId')))]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('diags-{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0mcopy        = [
                                                              [32m+[0m [0m{
                                                                  [32m+[0m [0mcount = "[length(parameters('NsgDiagnosticCategories'))]"
                                                                  [32m+[0m [0minput = {
                                                                      [32m+[0m [0mcategory = "[parameters('NsgDiagnosticCategories')[copyIndex('logs')]]"
                                                                      [32m+[0m [0menabled  = true
                                                                    }
                                                                  [32m+[0m [0mname  = "logs"
                                                                },
                                                            ]
                                                          [32m+[0m [0mworkspaceId = "[parameters('workspaceResourceId')]"
                                                        }
                                                      [32m+[0m [0mscope      = "[format('Microsoft.Network/networkSecurityGroups/{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mtype       = "Microsoft.Insights/diagnosticSettings"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion    = "2020-10-01"
                                                      [32m+[0m [0mcondition     = "[not(empty(parameters('FlowLogStorageAccountId')))]"
                                                      [32m+[0m [0mdependsOn     = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname          = "[format('flow-{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mproperties    = {
                                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                                              [32m+[0m [0mscope = "inner"
                                                            }
                                                          [32m+[0m [0mmode                        = "Incremental"
                                                          [32m+[0m [0mparameters                  = {
                                                              [32m+[0m [0mlocation            = {
                                                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                                                }
                                                              [32m+[0m [0mname                = {
                                                                  [32m+[0m [0mvalue = "[format('flowNsg-{0}', variables('nsgName'))]"
                                                                }
                                                              [32m+[0m [0mnsgId               = {
                                                                  [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                                }
                                                              [32m+[0m [0mstorageId           = {
                                                                  [32m+[0m [0mvalue = "[parameters('FlowLogStorageAccountId')]"
                                                                }
                                                              [32m+[0m [0mtrafficAnalytics    = {
                                                                  [32m+[0m [0mvalue = "[parameters('FlowLogTrafficAnalytics')]"
                                                                }
                                                              [32m+[0m [0mworkspaceId         = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceId')]"
                                                                }
                                                              [32m+[0m [0mworkspaceRegion     = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceRegion')]"
                                                                }
                                                              [32m+[0m [0mworkspaceResourceId = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceResourceId')]"
                                                                }
                                                            }
                                                          [32m+[0m [0mtemplate                    = {
                                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                                              [32m+[0m [0mmetadata       = {
                                                                  [32m+[0m [0m_generator = {
                                                                      [32m+[0m [0mname         = "bicep"
                                                                      [32m+[0m [0mtemplateHash = "319601346626837749"
                                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                                    }
                                                                }
                                                              [32m+[0m [0mparameters     = {
                                                                  [32m+[0m [0mlocation                 = {
                                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mname                     = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mnsgId                    = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mstorageId                = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mtrafficAnalytics         = {
                                                                      [32m+[0m [0mtype = "bool"
                                                                    }
                                                                  [32m+[0m [0mtrafficAnalyticsInterval = {
                                                                      [32m+[0m [0mdefaultValue = 60
                                                                      [32m+[0m [0mtype         = "int"
                                                                    }
                                                                  [32m+[0m [0mworkspaceId              = {
                                                                      [32m+[0m [0mdefaultValue = ""
                                                                      [32m+[0m [0mmetadata     = {
                                                                          [32m+[0m [0mdescription = "The resource guid of the attached workspace."
                                                                        }
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mworkspaceRegion          = {
                                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mworkspaceResourceId      = {
                                                                      [32m+[0m [0mdefaultValue = ""
                                                                      [32m+[0m [0mmetadata     = {
                                                                          [32m+[0m [0mdescription = "Resource Id of the attached workspace."
                                                                        }
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                }
                                                              [32m+[0m [0mresources      = [
                                                                  [32m+[0m [0m{
                                                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                                                      [32m+[0m [0mname       = "[format('NetworkWatcher_{0}/{1}', parameters('location'), parameters('name'))]"
                                                                      [32m+[0m [0mproperties = {
                                                                          [32m+[0m [0menabled                    = true
                                                                          [32m+[0m [0mflowAnalyticsConfiguration = {
                                                                              [32m+[0m [0mnetworkWatcherFlowAnalyticsConfiguration = {
                                                                                  [32m+[0m [0menabled                  = "[parameters('trafficAnalytics')]"
                                                                                  [32m+[0m [0mtrafficAnalyticsInterval = "[parameters('trafficAnalyticsInterval')]"
                                                                                  [32m+[0m [0mworkspaceId              = "[parameters('workspaceId')]"
                                                                                  [32m+[0m [0mworkspaceRegion          = "[parameters('workspaceRegion')]"
                                                                                  [32m+[0m [0mworkspaceResourceId      = "[parameters('workspaceResourceId')]"
                                                                                }
                                                                            }
                                                                          [32m+[0m [0mformat                     = {
                                                                              [32m+[0m [0mtype    = "JSON"
                                                                              [32m+[0m [0mversion = 2
                                                                            }
                                                                          [32m+[0m [0mretentionPolicy            = {
                                                                              [32m+[0m [0mdays    = 2
                                                                              [32m+[0m [0menabled = true
                                                                            }
                                                                          [32m+[0m [0mstorageId                  = "[parameters('storageId')]"
                                                                          [32m+[0m [0mtargetResourceId           = "[parameters('nsgId')]"
                                                                        }
                                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkWatchers/flowLogs"
                                                                    },
                                                                ]
                                                            }
                                                        }
                                                      [32m+[0m [0mresourceGroup = "NetworkWatcherRG"
                                                      [32m+[0m [0mtype          = "Microsoft.Resources/deployments"
                                                    },
                                                ]
                                              [32m+[0m [0mvariables      = {
                                                  [32m+[0m [0mnsgName = "[format('nsg-{0}', parameters('resourceName'))]"
                                                }
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Resources/deployments"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-10-01"
                                      [32m+[0m [0mcondition  = "[and(parameters('ingressApplicationGateway'), parameters('networkSecurityGroups'))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Storage/storageAccounts', variables('flowLogStorageName'))]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'nsgAcrPool')]",
                                        ]
                                      [32m+[0m [0mname       = "nsgAppGw"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                              [32m+[0m [0mscope = "inner"
                                            }
                                          [32m+[0m [0mmode                        = "Incremental"
                                          [32m+[0m [0mparameters                  = {
                                              [32m+[0m [0mFlowLogStorageAccountId      = {
                                                  [32m+[0m [0mvalue = "[if(parameters('CreateNsgFlowLogs'), resourceId('Microsoft.Storage/storageAccounts', variables('flowLogStorageName')), '')]"
                                                }
                                              [32m+[0m [0mlocation                     = {
                                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                                }
                                              [32m+[0m [0mresourceName                 = {
                                                  [32m+[0m [0mvalue = "[format('{0}-{1}', variables('appgw_subnet_name'), parameters('resourceName'))]"
                                                }
                                              [32m+[0m [0mruleInAllowAzureLoadBalancer = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mruleInAllowGwManagement      = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mruleInAllowInternetHttp      = {
                                                  [32m+[0m [0mvalue = "[parameters('ingressApplicationGatewayPublic')]"
                                                }
                                              [32m+[0m [0mruleInAllowInternetHttps     = {
                                                  [32m+[0m [0mvalue = "[parameters('ingressApplicationGatewayPublic')]"
                                                }
                                              [32m+[0m [0mruleInDenyInternet           = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mruleInGwManagementPort       = {
                                                  [32m+[0m [0mvalue = "65200-65535"
                                                }
                                              [32m+[0m [0mworkspaceId                  = {
                                                  [32m+[0m [0mvalue = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2021-06-01').customerId]"
                                                }
                                              [32m+[0m [0mworkspaceRegion              = {
                                                  [32m+[0m [0mvalue = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2021-06-01', 'full').location]"
                                                }
                                              [32m+[0m [0mworkspaceResourceId          = {
                                                  [32m+[0m [0mvalue = "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
                                                }
                                            }
                                          [32m+[0m [0mtemplate                    = {
                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                              [32m+[0m [0mmetadata       = {
                                                  [32m+[0m [0m_generator = {
                                                      [32m+[0m [0mname         = "bicep"
                                                      [32m+[0m [0mtemplateHash = "8961724704431716563"
                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                    }
                                                }
                                              [32m+[0m [0moutputs        = {
                                                  [32m+[0m [0mnsgId        = {
                                                      [32m+[0m [0mtype  = "string"
                                                      [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                    }
                                                  [32m+[0m [0mnsgSubnetObj = {
                                                      [32m+[0m [0mtype  = "object"
                                                      [32m+[0m [0mvalue = {
                                                          [32m+[0m [0mproperties = {
                                                              [32m+[0m [0mnetworkSecurityGroup = {
                                                                  [32m+[0m [0mid = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                              [32m+[0m [0mparameters     = {
                                                  [32m+[0m [0mFlowLogStorageAccountId      = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mFlowLogTrafficAnalytics      = {
                                                      [32m+[0m [0mdefaultValue = "[not(empty(parameters('FlowLogStorageAccountId')))]"
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mNsgDiagnosticCategories      = {
                                                      [32m+[0m [0mdefaultValue = [
                                                          [32m+[0m [0m"NetworkSecurityGroupEvent",
                                                          [32m+[0m [0m"NetworkSecurityGroupRuleCounter",
                                                        ]
                                                      [32m+[0m [0mtype         = "array"
                                                    }
                                                  [32m+[0m [0mlocation                     = {
                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mresourceName                 = {
                                                      [32m+[0m [0mtype = "string"
                                                    }
                                                  [32m+[0m [0mruleInAllowAzureLoadBalancer = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowBastionHostComms  = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowGwManagement      = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowInternetHttp      = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowInternetHttps     = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInDenyInternet           = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInDenySsh                = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInGwManagementPort       = {
                                                      [32m+[0m [0mdefaultValue = "443,65200-65535"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mruleOutAllowBastionComms     = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mworkspaceId                  = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mworkspaceRegion              = {
                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mworkspaceResourceId          = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                }
                                              [32m+[0m [0mresources      = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                                      [32m+[0m [0mname       = "[variables('nsgName')]"
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowGwManagement')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_AppGatewayManagement')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                   = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix = "*"
                                                          [32m+[0m [0mdestinationPortRange     = "[parameters('ruleInGwManagementPort')]"
                                                          [32m+[0m [0mdirection                = "Inbound"
                                                          [32m+[0m [0mpriority                 = 110
                                                          [32m+[0m [0mprotocol                 = "*"
                                                          [32m+[0m [0msourceAddressPrefix      = "GatewayManager"
                                                          [32m+[0m [0msourcePortRange          = "*"
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowAzureLoadBalancer')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_AzureLoadBalancer')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRange       = "*"
                                                          [32m+[0m [0mdestinationPortRanges      = []
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 120
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "AzureLoadBalancer"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInDenyInternet')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Deny_AllInboundInternet')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Deny"
                                                          [32m+[0m [0mdescription                = "Azure infrastructure communication"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRange       = "*"
                                                          [32m+[0m [0mdestinationPortRanges      = []
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 4096
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowInternetHttp')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Internet_Http')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"80",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 200
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowInternetHttps')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Internet_Https')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"443",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 210
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowBastionHostComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Bastion_Host_Communication')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"8080",
                                                              [32m+[0m [0m"5701",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 700
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "VirtualNetwork"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_SshRdp_Outbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"22",
                                                              [32m+[0m [0m"3389",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 200
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Azure_Cloud_Outbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "AzureCloud"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"443",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 210
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Bastion_Communication')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"8080",
                                                              [32m+[0m [0m"5701",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 220
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "VirtualNetwork"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Get_Session_Info')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "Internet"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"80",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 230
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInDenySsh')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'DenySshInbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Deny"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"22",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 100
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2021-05-01-preview"
                                                      [32m+[0m [0mcondition  = "[not(empty(parameters('workspaceResourceId')))]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('diags-{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0mcopy        = [
                                                              [32m+[0m [0m{
                                                                  [32m+[0m [0mcount = "[length(parameters('NsgDiagnosticCategories'))]"
                                                                  [32m+[0m [0minput = {
                                                                      [32m+[0m [0mcategory = "[parameters('NsgDiagnosticCategories')[copyIndex('logs')]]"
                                                                      [32m+[0m [0menabled  = true
                                                                    }
                                                                  [32m+[0m [0mname  = "logs"
                                                                },
                                                            ]
                                                          [32m+[0m [0mworkspaceId = "[parameters('workspaceResourceId')]"
                                                        }
                                                      [32m+[0m [0mscope      = "[format('Microsoft.Network/networkSecurityGroups/{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mtype       = "Microsoft.Insights/diagnosticSettings"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion    = "2020-10-01"
                                                      [32m+[0m [0mcondition     = "[not(empty(parameters('FlowLogStorageAccountId')))]"
                                                      [32m+[0m [0mdependsOn     = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname          = "[format('flow-{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mproperties    = {
                                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                                              [32m+[0m [0mscope = "inner"
                                                            }
                                                          [32m+[0m [0mmode                        = "Incremental"
                                                          [32m+[0m [0mparameters                  = {
                                                              [32m+[0m [0mlocation            = {
                                                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                                                }
                                                              [32m+[0m [0mname                = {
                                                                  [32m+[0m [0mvalue = "[format('flowNsg-{0}', variables('nsgName'))]"
                                                                }
                                                              [32m+[0m [0mnsgId               = {
                                                                  [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                                }
                                                              [32m+[0m [0mstorageId           = {
                                                                  [32m+[0m [0mvalue = "[parameters('FlowLogStorageAccountId')]"
                                                                }
                                                              [32m+[0m [0mtrafficAnalytics    = {
                                                                  [32m+[0m [0mvalue = "[parameters('FlowLogTrafficAnalytics')]"
                                                                }
                                                              [32m+[0m [0mworkspaceId         = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceId')]"
                                                                }
                                                              [32m+[0m [0mworkspaceRegion     = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceRegion')]"
                                                                }
                                                              [32m+[0m [0mworkspaceResourceId = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceResourceId')]"
                                                                }
                                                            }
                                                          [32m+[0m [0mtemplate                    = {
                                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                                              [32m+[0m [0mmetadata       = {
                                                                  [32m+[0m [0m_generator = {
                                                                      [32m+[0m [0mname         = "bicep"
                                                                      [32m+[0m [0mtemplateHash = "319601346626837749"
                                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                                    }
                                                                }
                                                              [32m+[0m [0mparameters     = {
                                                                  [32m+[0m [0mlocation                 = {
                                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mname                     = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mnsgId                    = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mstorageId                = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mtrafficAnalytics         = {
                                                                      [32m+[0m [0mtype = "bool"
                                                                    }
                                                                  [32m+[0m [0mtrafficAnalyticsInterval = {
                                                                      [32m+[0m [0mdefaultValue = 60
                                                                      [32m+[0m [0mtype         = "int"
                                                                    }
                                                                  [32m+[0m [0mworkspaceId              = {
                                                                      [32m+[0m [0mdefaultValue = ""
                                                                      [32m+[0m [0mmetadata     = {
                                                                          [32m+[0m [0mdescription = "The resource guid of the attached workspace."
                                                                        }
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mworkspaceRegion          = {
                                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mworkspaceResourceId      = {
                                                                      [32m+[0m [0mdefaultValue = ""
                                                                      [32m+[0m [0mmetadata     = {
                                                                          [32m+[0m [0mdescription = "Resource Id of the attached workspace."
                                                                        }
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                }
                                                              [32m+[0m [0mresources      = [
                                                                  [32m+[0m [0m{
                                                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                                                      [32m+[0m [0mname       = "[format('NetworkWatcher_{0}/{1}', parameters('location'), parameters('name'))]"
                                                                      [32m+[0m [0mproperties = {
                                                                          [32m+[0m [0menabled                    = true
                                                                          [32m+[0m [0mflowAnalyticsConfiguration = {
                                                                              [32m+[0m [0mnetworkWatcherFlowAnalyticsConfiguration = {
                                                                                  [32m+[0m [0menabled                  = "[parameters('trafficAnalytics')]"
                                                                                  [32m+[0m [0mtrafficAnalyticsInterval = "[parameters('trafficAnalyticsInterval')]"
                                                                                  [32m+[0m [0mworkspaceId              = "[parameters('workspaceId')]"
                                                                                  [32m+[0m [0mworkspaceRegion          = "[parameters('workspaceRegion')]"
                                                                                  [32m+[0m [0mworkspaceResourceId      = "[parameters('workspaceResourceId')]"
                                                                                }
                                                                            }
                                                                          [32m+[0m [0mformat                     = {
                                                                              [32m+[0m [0mtype    = "JSON"
                                                                              [32m+[0m [0mversion = 2
                                                                            }
                                                                          [32m+[0m [0mretentionPolicy            = {
                                                                              [32m+[0m [0mdays    = 2
                                                                              [32m+[0m [0menabled = true
                                                                            }
                                                                          [32m+[0m [0mstorageId                  = "[parameters('storageId')]"
                                                                          [32m+[0m [0mtargetResourceId           = "[parameters('nsgId')]"
                                                                        }
                                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkWatchers/flowLogs"
                                                                    },
                                                                ]
                                                            }
                                                        }
                                                      [32m+[0m [0mresourceGroup = "NetworkWatcherRG"
                                                      [32m+[0m [0mtype          = "Microsoft.Resources/deployments"
                                                    },
                                                ]
                                              [32m+[0m [0mvariables      = {
                                                  [32m+[0m [0mnsgName = "[format('nsg-{0}', parameters('resourceName'))]"
                                                }
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Resources/deployments"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-10-01"
                                      [32m+[0m [0mcondition  = "[and(parameters('bastion'), parameters('networkSecurityGroups'))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Storage/storageAccounts', variables('flowLogStorageName'))]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'nsgAppGw')]",
                                        ]
                                      [32m+[0m [0mname       = "nsgBastion"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                              [32m+[0m [0mscope = "inner"
                                            }
                                          [32m+[0m [0mmode                        = "Incremental"
                                          [32m+[0m [0mparameters                  = {
                                              [32m+[0m [0mFlowLogStorageAccountId      = {
                                                  [32m+[0m [0mvalue = "[if(parameters('CreateNsgFlowLogs'), resourceId('Microsoft.Storage/storageAccounts', variables('flowLogStorageName')), '')]"
                                                }
                                              [32m+[0m [0mlocation                     = {
                                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                                }
                                              [32m+[0m [0mresourceName                 = {
                                                  [32m+[0m [0mvalue = "[format('{0}-{1}', variables('bastion_subnet_name'), parameters('resourceName'))]"
                                                }
                                              [32m+[0m [0mruleInAllowAzureLoadBalancer = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mruleInAllowBastionHostComms  = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mruleInAllowGwManagement      = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mruleInAllowInternetHttps     = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mruleInGwManagementPort       = {
                                                  [32m+[0m [0mvalue = "443"
                                                }
                                              [32m+[0m [0mruleOutAllowBastionComms     = {
                                                  [32m+[0m [0mvalue = true
                                                }
                                              [32m+[0m [0mworkspaceId                  = {
                                                  [32m+[0m [0mvalue = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2021-06-01').customerId]"
                                                }
                                              [32m+[0m [0mworkspaceRegion              = {
                                                  [32m+[0m [0mvalue = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2021-06-01', 'full').location]"
                                                }
                                              [32m+[0m [0mworkspaceResourceId          = {
                                                  [32m+[0m [0mvalue = "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
                                                }
                                            }
                                          [32m+[0m [0mtemplate                    = {
                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                              [32m+[0m [0mmetadata       = {
                                                  [32m+[0m [0m_generator = {
                                                      [32m+[0m [0mname         = "bicep"
                                                      [32m+[0m [0mtemplateHash = "8961724704431716563"
                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                    }
                                                }
                                              [32m+[0m [0moutputs        = {
                                                  [32m+[0m [0mnsgId        = {
                                                      [32m+[0m [0mtype  = "string"
                                                      [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                    }
                                                  [32m+[0m [0mnsgSubnetObj = {
                                                      [32m+[0m [0mtype  = "object"
                                                      [32m+[0m [0mvalue = {
                                                          [32m+[0m [0mproperties = {
                                                              [32m+[0m [0mnetworkSecurityGroup = {
                                                                  [32m+[0m [0mid = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                              [32m+[0m [0mparameters     = {
                                                  [32m+[0m [0mFlowLogStorageAccountId      = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mFlowLogTrafficAnalytics      = {
                                                      [32m+[0m [0mdefaultValue = "[not(empty(parameters('FlowLogStorageAccountId')))]"
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mNsgDiagnosticCategories      = {
                                                      [32m+[0m [0mdefaultValue = [
                                                          [32m+[0m [0m"NetworkSecurityGroupEvent",
                                                          [32m+[0m [0m"NetworkSecurityGroupRuleCounter",
                                                        ]
                                                      [32m+[0m [0mtype         = "array"
                                                    }
                                                  [32m+[0m [0mlocation                     = {
                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mresourceName                 = {
                                                      [32m+[0m [0mtype = "string"
                                                    }
                                                  [32m+[0m [0mruleInAllowAzureLoadBalancer = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowBastionHostComms  = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowGwManagement      = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowInternetHttp      = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowInternetHttps     = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInDenyInternet           = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInDenySsh                = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInGwManagementPort       = {
                                                      [32m+[0m [0mdefaultValue = "443,65200-65535"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mruleOutAllowBastionComms     = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mworkspaceId                  = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mworkspaceRegion              = {
                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mworkspaceResourceId          = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                }
                                              [32m+[0m [0mresources      = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                                      [32m+[0m [0mname       = "[variables('nsgName')]"
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowGwManagement')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_AppGatewayManagement')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                   = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix = "*"
                                                          [32m+[0m [0mdestinationPortRange     = "[parameters('ruleInGwManagementPort')]"
                                                          [32m+[0m [0mdirection                = "Inbound"
                                                          [32m+[0m [0mpriority                 = 110
                                                          [32m+[0m [0mprotocol                 = "*"
                                                          [32m+[0m [0msourceAddressPrefix      = "GatewayManager"
                                                          [32m+[0m [0msourcePortRange          = "*"
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowAzureLoadBalancer')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_AzureLoadBalancer')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRange       = "*"
                                                          [32m+[0m [0mdestinationPortRanges      = []
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 120
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "AzureLoadBalancer"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInDenyInternet')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Deny_AllInboundInternet')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Deny"
                                                          [32m+[0m [0mdescription                = "Azure infrastructure communication"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRange       = "*"
                                                          [32m+[0m [0mdestinationPortRanges      = []
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 4096
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowInternetHttp')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Internet_Http')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"80",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 200
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowInternetHttps')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Internet_Https')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"443",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 210
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowBastionHostComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Bastion_Host_Communication')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"8080",
                                                              [32m+[0m [0m"5701",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 700
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "VirtualNetwork"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_SshRdp_Outbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"22",
                                                              [32m+[0m [0m"3389",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 200
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Azure_Cloud_Outbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "AzureCloud"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"443",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 210
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Bastion_Communication')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"8080",
                                                              [32m+[0m [0m"5701",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 220
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "VirtualNetwork"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Get_Session_Info')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "Internet"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"80",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 230
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInDenySsh')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'DenySshInbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Deny"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"22",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 100
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2021-05-01-preview"
                                                      [32m+[0m [0mcondition  = "[not(empty(parameters('workspaceResourceId')))]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('diags-{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0mcopy        = [
                                                              [32m+[0m [0m{
                                                                  [32m+[0m [0mcount = "[length(parameters('NsgDiagnosticCategories'))]"
                                                                  [32m+[0m [0minput = {
                                                                      [32m+[0m [0mcategory = "[parameters('NsgDiagnosticCategories')[copyIndex('logs')]]"
                                                                      [32m+[0m [0menabled  = true
                                                                    }
                                                                  [32m+[0m [0mname  = "logs"
                                                                },
                                                            ]
                                                          [32m+[0m [0mworkspaceId = "[parameters('workspaceResourceId')]"
                                                        }
                                                      [32m+[0m [0mscope      = "[format('Microsoft.Network/networkSecurityGroups/{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mtype       = "Microsoft.Insights/diagnosticSettings"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion    = "2020-10-01"
                                                      [32m+[0m [0mcondition     = "[not(empty(parameters('FlowLogStorageAccountId')))]"
                                                      [32m+[0m [0mdependsOn     = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname          = "[format('flow-{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mproperties    = {
                                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                                              [32m+[0m [0mscope = "inner"
                                                            }
                                                          [32m+[0m [0mmode                        = "Incremental"
                                                          [32m+[0m [0mparameters                  = {
                                                              [32m+[0m [0mlocation            = {
                                                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                                                }
                                                              [32m+[0m [0mname                = {
                                                                  [32m+[0m [0mvalue = "[format('flowNsg-{0}', variables('nsgName'))]"
                                                                }
                                                              [32m+[0m [0mnsgId               = {
                                                                  [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                                }
                                                              [32m+[0m [0mstorageId           = {
                                                                  [32m+[0m [0mvalue = "[parameters('FlowLogStorageAccountId')]"
                                                                }
                                                              [32m+[0m [0mtrafficAnalytics    = {
                                                                  [32m+[0m [0mvalue = "[parameters('FlowLogTrafficAnalytics')]"
                                                                }
                                                              [32m+[0m [0mworkspaceId         = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceId')]"
                                                                }
                                                              [32m+[0m [0mworkspaceRegion     = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceRegion')]"
                                                                }
                                                              [32m+[0m [0mworkspaceResourceId = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceResourceId')]"
                                                                }
                                                            }
                                                          [32m+[0m [0mtemplate                    = {
                                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                                              [32m+[0m [0mmetadata       = {
                                                                  [32m+[0m [0m_generator = {
                                                                      [32m+[0m [0mname         = "bicep"
                                                                      [32m+[0m [0mtemplateHash = "319601346626837749"
                                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                                    }
                                                                }
                                                              [32m+[0m [0mparameters     = {
                                                                  [32m+[0m [0mlocation                 = {
                                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mname                     = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mnsgId                    = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mstorageId                = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mtrafficAnalytics         = {
                                                                      [32m+[0m [0mtype = "bool"
                                                                    }
                                                                  [32m+[0m [0mtrafficAnalyticsInterval = {
                                                                      [32m+[0m [0mdefaultValue = 60
                                                                      [32m+[0m [0mtype         = "int"
                                                                    }
                                                                  [32m+[0m [0mworkspaceId              = {
                                                                      [32m+[0m [0mdefaultValue = ""
                                                                      [32m+[0m [0mmetadata     = {
                                                                          [32m+[0m [0mdescription = "The resource guid of the attached workspace."
                                                                        }
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mworkspaceRegion          = {
                                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mworkspaceResourceId      = {
                                                                      [32m+[0m [0mdefaultValue = ""
                                                                      [32m+[0m [0mmetadata     = {
                                                                          [32m+[0m [0mdescription = "Resource Id of the attached workspace."
                                                                        }
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                }
                                                              [32m+[0m [0mresources      = [
                                                                  [32m+[0m [0m{
                                                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                                                      [32m+[0m [0mname       = "[format('NetworkWatcher_{0}/{1}', parameters('location'), parameters('name'))]"
                                                                      [32m+[0m [0mproperties = {
                                                                          [32m+[0m [0menabled                    = true
                                                                          [32m+[0m [0mflowAnalyticsConfiguration = {
                                                                              [32m+[0m [0mnetworkWatcherFlowAnalyticsConfiguration = {
                                                                                  [32m+[0m [0menabled                  = "[parameters('trafficAnalytics')]"
                                                                                  [32m+[0m [0mtrafficAnalyticsInterval = "[parameters('trafficAnalyticsInterval')]"
                                                                                  [32m+[0m [0mworkspaceId              = "[parameters('workspaceId')]"
                                                                                  [32m+[0m [0mworkspaceRegion          = "[parameters('workspaceRegion')]"
                                                                                  [32m+[0m [0mworkspaceResourceId      = "[parameters('workspaceResourceId')]"
                                                                                }
                                                                            }
                                                                          [32m+[0m [0mformat                     = {
                                                                              [32m+[0m [0mtype    = "JSON"
                                                                              [32m+[0m [0mversion = 2
                                                                            }
                                                                          [32m+[0m [0mretentionPolicy            = {
                                                                              [32m+[0m [0mdays    = 2
                                                                              [32m+[0m [0menabled = true
                                                                            }
                                                                          [32m+[0m [0mstorageId                  = "[parameters('storageId')]"
                                                                          [32m+[0m [0mtargetResourceId           = "[parameters('nsgId')]"
                                                                        }
                                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkWatchers/flowLogs"
                                                                    },
                                                                ]
                                                            }
                                                        }
                                                      [32m+[0m [0mresourceGroup = "NetworkWatcherRG"
                                                      [32m+[0m [0mtype          = "Microsoft.Resources/deployments"
                                                    },
                                                ]
                                              [32m+[0m [0mvariables      = {
                                                  [32m+[0m [0mnsgName = "[format('nsg-{0}', parameters('resourceName'))]"
                                                }
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Resources/deployments"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-10-01"
                                      [32m+[0m [0mcondition  = "[and(parameters('privateLinks'), parameters('networkSecurityGroups'))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Storage/storageAccounts', variables('flowLogStorageName'))]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'nsgBastion')]",
                                        ]
                                      [32m+[0m [0mname       = "nsgPrivateLinks"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                              [32m+[0m [0mscope = "inner"
                                            }
                                          [32m+[0m [0mmode                        = "Incremental"
                                          [32m+[0m [0mparameters                  = {
                                              [32m+[0m [0mFlowLogStorageAccountId = {
                                                  [32m+[0m [0mvalue = "[if(parameters('CreateNsgFlowLogs'), resourceId('Microsoft.Storage/storageAccounts', variables('flowLogStorageName')), '')]"
                                                }
                                              [32m+[0m [0mlocation                = {
                                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                                }
                                              [32m+[0m [0mresourceName            = {
                                                  [32m+[0m [0mvalue = "[format('{0}-{1}', variables('private_link_subnet_name'), parameters('resourceName'))]"
                                                }
                                              [32m+[0m [0mworkspaceId             = {
                                                  [32m+[0m [0mvalue = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2021-06-01').customerId]"
                                                }
                                              [32m+[0m [0mworkspaceRegion         = {
                                                  [32m+[0m [0mvalue = "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName')), '2021-06-01', 'full').location]"
                                                }
                                              [32m+[0m [0mworkspaceResourceId     = {
                                                  [32m+[0m [0mvalue = "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('workspaceResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
                                                }
                                            }
                                          [32m+[0m [0mtemplate                    = {
                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                              [32m+[0m [0mmetadata       = {
                                                  [32m+[0m [0m_generator = {
                                                      [32m+[0m [0mname         = "bicep"
                                                      [32m+[0m [0mtemplateHash = "8961724704431716563"
                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                    }
                                                }
                                              [32m+[0m [0moutputs        = {
                                                  [32m+[0m [0mnsgId        = {
                                                      [32m+[0m [0mtype  = "string"
                                                      [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                    }
                                                  [32m+[0m [0mnsgSubnetObj = {
                                                      [32m+[0m [0mtype  = "object"
                                                      [32m+[0m [0mvalue = {
                                                          [32m+[0m [0mproperties = {
                                                              [32m+[0m [0mnetworkSecurityGroup = {
                                                                  [32m+[0m [0mid = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                              [32m+[0m [0mparameters     = {
                                                  [32m+[0m [0mFlowLogStorageAccountId      = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mFlowLogTrafficAnalytics      = {
                                                      [32m+[0m [0mdefaultValue = "[not(empty(parameters('FlowLogStorageAccountId')))]"
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mNsgDiagnosticCategories      = {
                                                      [32m+[0m [0mdefaultValue = [
                                                          [32m+[0m [0m"NetworkSecurityGroupEvent",
                                                          [32m+[0m [0m"NetworkSecurityGroupRuleCounter",
                                                        ]
                                                      [32m+[0m [0mtype         = "array"
                                                    }
                                                  [32m+[0m [0mlocation                     = {
                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mresourceName                 = {
                                                      [32m+[0m [0mtype = "string"
                                                    }
                                                  [32m+[0m [0mruleInAllowAzureLoadBalancer = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowBastionHostComms  = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowGwManagement      = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowInternetHttp      = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInAllowInternetHttps     = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInDenyInternet           = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInDenySsh                = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mruleInGwManagementPort       = {
                                                      [32m+[0m [0mdefaultValue = "443,65200-65535"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mruleOutAllowBastionComms     = {
                                                      [32m+[0m [0mdefaultValue = false
                                                      [32m+[0m [0mtype         = "bool"
                                                    }
                                                  [32m+[0m [0mworkspaceId                  = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mworkspaceRegion              = {
                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                  [32m+[0m [0mworkspaceResourceId          = {
                                                      [32m+[0m [0mdefaultValue = ""
                                                      [32m+[0m [0mtype         = "string"
                                                    }
                                                }
                                              [32m+[0m [0mresources      = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                                      [32m+[0m [0mname       = "[variables('nsgName')]"
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowGwManagement')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_AppGatewayManagement')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                   = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix = "*"
                                                          [32m+[0m [0mdestinationPortRange     = "[parameters('ruleInGwManagementPort')]"
                                                          [32m+[0m [0mdirection                = "Inbound"
                                                          [32m+[0m [0mpriority                 = 110
                                                          [32m+[0m [0mprotocol                 = "*"
                                                          [32m+[0m [0msourceAddressPrefix      = "GatewayManager"
                                                          [32m+[0m [0msourcePortRange          = "*"
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowAzureLoadBalancer')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_AzureLoadBalancer')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRange       = "*"
                                                          [32m+[0m [0mdestinationPortRanges      = []
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 120
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "AzureLoadBalancer"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInDenyInternet')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Deny_AllInboundInternet')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Deny"
                                                          [32m+[0m [0mdescription                = "Azure infrastructure communication"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRange       = "*"
                                                          [32m+[0m [0mdestinationPortRanges      = []
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 4096
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowInternetHttp')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Internet_Http')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"80",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 200
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowInternetHttps')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Internet_Https')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"443",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 210
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "Internet"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInAllowBastionHostComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Bastion_Host_Communication')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"8080",
                                                              [32m+[0m [0m"5701",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 700
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "VirtualNetwork"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_SshRdp_Outbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"22",
                                                              [32m+[0m [0m"3389",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 200
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Azure_Cloud_Outbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "AzureCloud"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"443",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 210
                                                          [32m+[0m [0mprotocol                   = "Tcp"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Bastion_Communication')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "VirtualNetwork"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"8080",
                                                              [32m+[0m [0m"5701",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 220
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "VirtualNetwork"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleOutAllowBastionComms')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'Allow_Get_Session_Info')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Allow"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "Internet"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"80",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Outbound"
                                                          [32m+[0m [0mpriority                   = 230
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                                      [32m+[0m [0mcondition  = "[parameters('ruleInDenySsh')]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('{0}/{1}', variables('nsgName'), 'DenySshInbound')]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0maccess                     = "Deny"
                                                          [32m+[0m [0mdestinationAddressPrefix   = "*"
                                                          [32m+[0m [0mdestinationAddressPrefixes = []
                                                          [32m+[0m [0mdestinationPortRanges      = [
                                                              [32m+[0m [0m"22",
                                                            ]
                                                          [32m+[0m [0mdirection                  = "Inbound"
                                                          [32m+[0m [0mpriority                   = 100
                                                          [32m+[0m [0mprotocol                   = "*"
                                                          [32m+[0m [0msourceAddressPrefix        = "*"
                                                          [32m+[0m [0msourceAddressPrefixes      = []
                                                          [32m+[0m [0msourcePortRange            = "*"
                                                          [32m+[0m [0msourcePortRanges           = []
                                                        }
                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkSecurityGroups/securityRules"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion = "2021-05-01-preview"
                                                      [32m+[0m [0mcondition  = "[not(empty(parameters('workspaceResourceId')))]"
                                                      [32m+[0m [0mdependsOn  = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname       = "[format('diags-{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mproperties = {
                                                          [32m+[0m [0mcopy        = [
                                                              [32m+[0m [0m{
                                                                  [32m+[0m [0mcount = "[length(parameters('NsgDiagnosticCategories'))]"
                                                                  [32m+[0m [0minput = {
                                                                      [32m+[0m [0mcategory = "[parameters('NsgDiagnosticCategories')[copyIndex('logs')]]"
                                                                      [32m+[0m [0menabled  = true
                                                                    }
                                                                  [32m+[0m [0mname  = "logs"
                                                                },
                                                            ]
                                                          [32m+[0m [0mworkspaceId = "[parameters('workspaceResourceId')]"
                                                        }
                                                      [32m+[0m [0mscope      = "[format('Microsoft.Network/networkSecurityGroups/{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mtype       = "Microsoft.Insights/diagnosticSettings"
                                                    },
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mapiVersion    = "2020-10-01"
                                                      [32m+[0m [0mcondition     = "[not(empty(parameters('FlowLogStorageAccountId')))]"
                                                      [32m+[0m [0mdependsOn     = [
                                                          [32m+[0m [0m"[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
                                                        ]
                                                      [32m+[0m [0mname          = "[format('flow-{0}', variables('nsgName'))]"
                                                      [32m+[0m [0mproperties    = {
                                                          [32m+[0m [0mexpressionEvaluationOptions = {
                                                              [32m+[0m [0mscope = "inner"
                                                            }
                                                          [32m+[0m [0mmode                        = "Incremental"
                                                          [32m+[0m [0mparameters                  = {
                                                              [32m+[0m [0mlocation            = {
                                                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                                                }
                                                              [32m+[0m [0mname                = {
                                                                  [32m+[0m [0mvalue = "[format('flowNsg-{0}', variables('nsgName'))]"
                                                                }
                                                              [32m+[0m [0mnsgId               = {
                                                                  [32m+[0m [0mvalue = "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                                                                }
                                                              [32m+[0m [0mstorageId           = {
                                                                  [32m+[0m [0mvalue = "[parameters('FlowLogStorageAccountId')]"
                                                                }
                                                              [32m+[0m [0mtrafficAnalytics    = {
                                                                  [32m+[0m [0mvalue = "[parameters('FlowLogTrafficAnalytics')]"
                                                                }
                                                              [32m+[0m [0mworkspaceId         = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceId')]"
                                                                }
                                                              [32m+[0m [0mworkspaceRegion     = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceRegion')]"
                                                                }
                                                              [32m+[0m [0mworkspaceResourceId = {
                                                                  [32m+[0m [0mvalue = "[parameters('workspaceResourceId')]"
                                                                }
                                                            }
                                                          [32m+[0m [0mtemplate                    = {
                                                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                                                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                                                              [32m+[0m [0mmetadata       = {
                                                                  [32m+[0m [0m_generator = {
                                                                      [32m+[0m [0mname         = "bicep"
                                                                      [32m+[0m [0mtemplateHash = "319601346626837749"
                                                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                                                    }
                                                                }
                                                              [32m+[0m [0mparameters     = {
                                                                  [32m+[0m [0mlocation                 = {
                                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mname                     = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mnsgId                    = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mstorageId                = {
                                                                      [32m+[0m [0mtype = "string"
                                                                    }
                                                                  [32m+[0m [0mtrafficAnalytics         = {
                                                                      [32m+[0m [0mtype = "bool"
                                                                    }
                                                                  [32m+[0m [0mtrafficAnalyticsInterval = {
                                                                      [32m+[0m [0mdefaultValue = 60
                                                                      [32m+[0m [0mtype         = "int"
                                                                    }
                                                                  [32m+[0m [0mworkspaceId              = {
                                                                      [32m+[0m [0mdefaultValue = ""
                                                                      [32m+[0m [0mmetadata     = {
                                                                          [32m+[0m [0mdescription = "The resource guid of the attached workspace."
                                                                        }
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mworkspaceRegion          = {
                                                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                  [32m+[0m [0mworkspaceResourceId      = {
                                                                      [32m+[0m [0mdefaultValue = ""
                                                                      [32m+[0m [0mmetadata     = {
                                                                          [32m+[0m [0mdescription = "Resource Id of the attached workspace."
                                                                        }
                                                                      [32m+[0m [0mtype         = "string"
                                                                    }
                                                                }
                                                              [32m+[0m [0mresources      = [
                                                                  [32m+[0m [0m{
                                                                      [32m+[0m [0mapiVersion = "2021-05-01"
                                                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                                                      [32m+[0m [0mname       = "[format('NetworkWatcher_{0}/{1}', parameters('location'), parameters('name'))]"
                                                                      [32m+[0m [0mproperties = {
                                                                          [32m+[0m [0menabled                    = true
                                                                          [32m+[0m [0mflowAnalyticsConfiguration = {
                                                                              [32m+[0m [0mnetworkWatcherFlowAnalyticsConfiguration = {
                                                                                  [32m+[0m [0menabled                  = "[parameters('trafficAnalytics')]"
                                                                                  [32m+[0m [0mtrafficAnalyticsInterval = "[parameters('trafficAnalyticsInterval')]"
                                                                                  [32m+[0m [0mworkspaceId              = "[parameters('workspaceId')]"
                                                                                  [32m+[0m [0mworkspaceRegion          = "[parameters('workspaceRegion')]"
                                                                                  [32m+[0m [0mworkspaceResourceId      = "[parameters('workspaceResourceId')]"
                                                                                }
                                                                            }
                                                                          [32m+[0m [0mformat                     = {
                                                                              [32m+[0m [0mtype    = "JSON"
                                                                              [32m+[0m [0mversion = 2
                                                                            }
                                                                          [32m+[0m [0mretentionPolicy            = {
                                                                              [32m+[0m [0mdays    = 2
                                                                              [32m+[0m [0menabled = true
                                                                            }
                                                                          [32m+[0m [0mstorageId                  = "[parameters('storageId')]"
                                                                          [32m+[0m [0mtargetResourceId           = "[parameters('nsgId')]"
                                                                        }
                                                                      [32m+[0m [0mtype       = "Microsoft.Network/networkWatchers/flowLogs"
                                                                    },
                                                                ]
                                                            }
                                                        }
                                                      [32m+[0m [0mresourceGroup = "NetworkWatcherRG"
                                                      [32m+[0m [0mtype          = "Microsoft.Resources/deployments"
                                                    },
                                                ]
                                              [32m+[0m [0mvariables      = {
                                                  [32m+[0m [0mnsgName = "[format('nsg-{0}', parameters('resourceName'))]"
                                                }
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Resources/deployments"
                                    },
                                ]
                              [32m+[0m [0mvariables      = {
                                  [32m+[0m [0macrpool_baseSubnet       = {
                                      [32m+[0m [0mname       = "[variables('acrpool_subnet_name')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0maddressPrefix = "[parameters('acrAgentPoolSubnetAddressPrefix')]"
                                        }
                                    }
                                  [32m+[0m [0macrpool_subnet_name      = "acrpool-sn"
                                  [32m+[0m [0maks_baseSubnet           = {
                                      [32m+[0m [0mname       = "[variables('aks_subnet_name')]"
                                      [32m+[0m [0mproperties = "[union(createObject('addressPrefix', parameters('vnetAksSubnetAddressPrefix')), if(parameters('privateLinks'), createObject('privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Enabled'), createObject()), if(parameters('natGateway'), createObject('natGateway', createObject('id', resourceId('Microsoft.Network/natGateways', variables('natGwName')))), createObject()), if(parameters('azureFirewalls'), createObject('routeTable', createObject('id', resourceId('Microsoft.Network/routeTables', variables('routeFwTableName')))), createObject()))]"
                                    }
                                  [32m+[0m [0maks_subnet_name          = "aks-sn"
                                  [32m+[0m [0mappgw_baseSubnet         = {
                                      [32m+[0m [0mname       = "[variables('appgw_subnet_name')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0maddressPrefix = "[parameters('vnetAppGatewaySubnetAddressPrefix')]"
                                        }
                                    }
                                  [32m+[0m [0mappgw_subnet_name        = "appgw-sn"
                                  [32m+[0m [0mbastion_baseSubnet       = {
                                      [32m+[0m [0mname       = "[variables('bastion_subnet_name')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0maddressPrefix = "[parameters('bastionSubnetAddressPrefix')]"
                                        }
                                    }
                                  [32m+[0m [0mbastion_subnet_name      = "AzureBastionSubnet"
                                  [32m+[0m [0mflowLogStorageName       = "[if(greater(length(variables('flowLogStorageRawName')), 24), substring(variables('flowLogStorageRawName'), 0, 24), variables('flowLogStorageRawName'))]"
                                  [32m+[0m [0mflowLogStorageRawName    = "[toLower(format('stflow{0}{1}', parameters('resourceName'), uniqueString(resourceGroup().id, parameters('resourceName'))))]"
                                  [32m+[0m [0mfw_subnet                = {
                                      [32m+[0m [0mname       = "[variables('fw_subnet_name')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0maddressPrefix = "[parameters('vnetFirewallSubnetAddressPrefix')]"
                                        }
                                    }
                                  [32m+[0m [0mfw_subnet_name           = "AzureFirewallSubnet"
                                  [32m+[0m [0mnatGwName                = "[format('ng-{0}', parameters('resourceName'))]"
                                  [32m+[0m [0mnetworkContributorRole   = "[resourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]"
                                  [32m+[0m [0mprivateDnsAcrLinkName    = "[format('vnet-dnscr-{0}', parameters('resourceName'))]"
                                  [32m+[0m [0mprivateDnsAkvLinkName    = "[format('vnet-dnscr-{0}', parameters('resourceName'))]"
                                  [32m+[0m [0mprivateLinkAcrName       = "[format('pl-acr-{0}', parameters('resourceName'))]"
                                  [32m+[0m [0mprivateLinkAkvName       = "[format('pl-akv-{0}', parameters('resourceName'))]"
                                  [32m+[0m [0mprivate_link_baseSubnet  = {
                                      [32m+[0m [0mname       = "[variables('private_link_subnet_name')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0maddressPrefix                     = "[parameters('privateLinkSubnetAddressPrefix')]"
                                          [32m+[0m [0mprivateEndpointNetworkPolicies    = "Disabled"
                                          [32m+[0m [0mprivateLinkServiceNetworkPolicies = "Enabled"
                                        }
                                    }
                                  [32m+[0m [0mprivate_link_subnet_name = "privatelinks-sn"
                                  [32m+[0m [0mpublicIpAddressName      = "[format('pip-{0}', parameters('bastionHostName'))]"
                                  [32m+[0m [0mrouteFwTableName         = "[format('rt-afw-{0}', parameters('resourceName'))]"
                                  [32m+[0m [0mvnetName                 = "[format('vnet-{0}', parameters('resourceName'))]"
                                }
                            }
                        }
                      [32m+[0m [0mtype       = "Microsoft.Resources/deployments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion    = "2020-10-01"
                      [32m+[0m [0mcondition     = "[not(empty(parameters('dnsZoneId')))]"
                      [32m+[0m [0mdependsOn     = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'network')]",
                        ]
                      [32m+[0m [0mname          = "addDnsContributor"
                      [32m+[0m [0mproperties    = {
                          [32m+[0m [0mexpressionEvaluationOptions = {
                              [32m+[0m [0mscope = "inner"
                            }
                          [32m+[0m [0mmode                        = "Incremental"
                          [32m+[0m [0mparameters                  = {
                              [32m+[0m [0mdnsZoneName = {
                                  [32m+[0m [0mvalue = "[variables('dnsZoneName')]"
                                }
                              [32m+[0m [0misPrivate   = {
                                  [32m+[0m [0mvalue = "[variables('isPrivate')]"
                                }
                              [32m+[0m [0mprincipalId = {
                                  [32m+[0m [0mvalue = "[reference(resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))).identityProfile.kubeletidentity.objectId]"
                                }
                              [32m+[0m [0mvnetId      = {
                                  [32m+[0m [0mvalue = "[if(variables('isPrivate'), if(not(empty(parameters('byoAKSSubnetId'))), split(parameters('byoAKSSubnetId'), '/subnets')[0], if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.vnetId.value, '')), '')]"
                                }
                            }
                          [32m+[0m [0mtemplate                    = {
                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                              [32m+[0m [0mmetadata       = {
                                  [32m+[0m [0m_generator = {
                                      [32m+[0m [0mname         = "bicep"
                                      [32m+[0m [0mtemplateHash = "18422316694035520455"
                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                    }
                                }
                              [32m+[0m [0mparameters     = {
                                  [32m+[0m [0mdnsZoneName = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0misPrivate   = {
                                      [32m+[0m [0mtype = "bool"
                                    }
                                  [32m+[0m [0mprincipalId = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0mvnetId      = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                }
                              [32m+[0m [0mresources      = [
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-04-01-preview"
                                      [32m+[0m [0mcondition  = "[not(parameters('isPrivate'))]"
                                      [32m+[0m [0mname       = "[guid(parameters('principalId'), 'ZoneContributor', variables('DNSZoneContributor'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mprincipalId      = "[parameters('principalId')]"
                                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                                          [32m+[0m [0mroleDefinitionId = "[variables('DNSZoneContributor')]"
                                        }
                                      [32m+[0m [0mscope      = "[format('Microsoft.Network/dnsZones/{0}', parameters('dnsZoneName'))]"
                                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-04-01-preview"
                                      [32m+[0m [0mcondition  = "[parameters('isPrivate')]"
                                      [32m+[0m [0mname       = "[guid(parameters('principalId'), 'PrivateZoneContributor', variables('PrivateDNSZoneContributor'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mprincipalId      = "[parameters('principalId')]"
                                          [32m+[0m [0mprincipalType    = "ServicePrincipal"
                                          [32m+[0m [0mroleDefinitionId = "[variables('PrivateDNSZoneContributor')]"
                                        }
                                      [32m+[0m [0mscope      = "[format('Microsoft.Network/privateDnsZones/{0}', parameters('dnsZoneName'))]"
                                      [32m+[0m [0mtype       = "Microsoft.Authorization/roleAssignments"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-06-01"
                                      [32m+[0m [0mcondition  = "[and(parameters('isPrivate'), not(empty(parameters('vnetId'))))]"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('{0}/{1}', parameters('dnsZoneName'), 'privatedns')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mregistrationEnabled = false
                                          [32m+[0m [0mvirtualNetwork      = {
                                              [32m+[0m [0mid = "[parameters('vnetId')]"
                                            }
                                        }
                                      [32m+[0m [0mtags       = {}
                                      [32m+[0m [0mtype       = "Microsoft.Network/privateDnsZones/virtualNetworkLinks"
                                    },
                                ]
                              [32m+[0m [0mvariables      = {
                                  [32m+[0m [0mDNSZoneContributor        = "[resourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]"
                                  [32m+[0m [0mPrivateDNSZoneContributor = "[resourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]"
                                }
                            }
                        }
                      [32m+[0m [0mresourceGroup = "[variables('dnsZoneRg')]"
                      [32m+[0m [0mtype          = "Microsoft.Resources/deployments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2020-10-01"
                      [32m+[0m [0mcondition  = "[and(and(and(parameters('custom_vnet'), not(empty(parameters('registries_sku')))), parameters('privateLinks')), parameters('acrPrivatePool'))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'network')]",
                        ]
                      [32m+[0m [0mname       = "acrprivatepool"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mexpressionEvaluationOptions = {
                              [32m+[0m [0mscope = "inner"
                            }
                          [32m+[0m [0mmode                        = "Incremental"
                          [32m+[0m [0mparameters                  = {
                              [32m+[0m [0macrName         = {
                                  [32m+[0m [0mvalue = "[variables('acrName')]"
                                }
                              [32m+[0m [0macrPoolSubnetId = {
                                  [32m+[0m [0mvalue = "[if(parameters('custom_vnet'), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.acrPoolSubnetId.value, '')]"
                                }
                              [32m+[0m [0mlocation        = {
                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                }
                            }
                          [32m+[0m [0mtemplate                    = {
                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                              [32m+[0m [0mmetadata       = {
                                  [32m+[0m [0m_generator = {
                                      [32m+[0m [0mname         = "bicep"
                                      [32m+[0m [0mtemplateHash = "14126414751989743689"
                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                    }
                                }
                              [32m+[0m [0mparameters     = {
                                  [32m+[0m [0macrName         = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0macrPoolSubnetId = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mlocation        = {
                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                      [32m+[0m [0mtype         = "string"
                                    }
                                }
                              [32m+[0m [0mresources      = [
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2019-06-01-preview"
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[format('{0}/{1}', parameters('acrName'), 'private-pool')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcount                          = 1
                                          [32m+[0m [0mos                             = "Linux"
                                          [32m+[0m [0mtier                           = "S1"
                                          [32m+[0m [0mvirtualNetworkSubnetResourceId = "[parameters('acrPoolSubnetId')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.ContainerRegistry/registries/agentPools"
                                    },
                                ]
                            }
                        }
                      [32m+[0m [0mtype       = "Microsoft.Resources/deployments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2020-10-01"
                      [32m+[0m [0mcondition  = "[and(parameters('azureFirewalls'), parameters('custom_vnet'))]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]",
                          [32m+[0m [0m"[resourceId('Microsoft.Resources/deployments', 'network')]",
                        ]
                      [32m+[0m [0mname       = "firewall"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mexpressionEvaluationOptions = {
                              [32m+[0m [0mscope = "inner"
                            }
                          [32m+[0m [0mmode                        = "Incremental"
                          [32m+[0m [0mparameters                  = {
                              [32m+[0m [0macrAgentPoolSubnetAddressPrefix = {
                                  [32m+[0m [0mvalue = "[parameters('acrAgentPoolSubnetAddressPrefix')]"
                                }
                              [32m+[0m [0macrPrivatePool                  = {
                                  [32m+[0m [0mvalue = "[parameters('acrPrivatePool')]"
                                }
                              [32m+[0m [0mappDnsZoneName                  = {
                                  [32m+[0m [0mvalue = "[variables('dnsZoneName')]"
                                }
                              [32m+[0m [0mavailabilityZones               = {
                                  [32m+[0m [0mvalue = "[parameters('availabilityZones')]"
                                }
                              [32m+[0m [0mcertManagerFW                   = {
                                  [32m+[0m [0mvalue = "[parameters('certManagerFW')]"
                                }
                              [32m+[0m [0mfwSubnetId                      = {
                                  [32m+[0m [0mvalue = "[if(and(parameters('azureFirewalls'), parameters('custom_vnet')), reference(resourceId('Microsoft.Resources/deployments', 'network'), '2020-10-01').outputs.fwSubnetId.value, '')]"
                                }
                              [32m+[0m [0mlocation                        = {
                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                }
                              [32m+[0m [0mresourceName                    = {
                                  [32m+[0m [0mvalue = "[parameters('resourceName')]"
                                }
                              [32m+[0m [0mvnetAksSubnetAddressPrefix      = {
                                  [32m+[0m [0mvalue = "[parameters('vnetAksSubnetAddressPrefix')]"
                                }
                              [32m+[0m [0mworkspaceDiagsId                = {
                                  [32m+[0m [0mvalue = "[if(variables('createLaw'), resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name')), '')]"
                                }
                            }
                          [32m+[0m [0mtemplate                    = {
                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                              [32m+[0m [0mmetadata       = {
                                  [32m+[0m [0m_generator = {
                                      [32m+[0m [0mname         = "bicep"
                                      [32m+[0m [0mtemplateHash = "15317392324670371250"
                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                    }
                                }
                              [32m+[0m [0mparameters     = {
                                  [32m+[0m [0macrAgentPoolSubnetAddressPrefix = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0macrPrivatePool                  = {
                                      [32m+[0m [0mdefaultValue = false
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0mappDnsZoneName                  = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mmetadata     = {
                                          [32m+[0m [0mdescription = "Whitelist dnsZone name (required by cert-manager validation process)"
                                        }
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mavailabilityZones               = {
                                      [32m+[0m [0mdefaultValue = []
                                      [32m+[0m [0mtype         = "array"
                                    }
                                  [32m+[0m [0mcertManagerFW                   = {
                                      [32m+[0m [0mdefaultValue = false
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0mfwSubnetId                      = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0mlocation                        = {
                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mresourceName                    = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0mvnetAksSubnetAddressPrefix      = {
                                      [32m+[0m [0mtype = "string"
                                    }
                                  [32m+[0m [0mworkspaceDiagsId                = {
                                      [32m+[0m [0mdefaultValue = ""
                                      [32m+[0m [0mtype         = "string"
                                    }
                                }
                              [32m+[0m [0mresources      = [
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-03-01"
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[variables('firewallPublicIpName')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mpublicIPAddressVersion   = "IPv4"
                                          [32m+[0m [0mpublicIPAllocationMethod = "Static"
                                        }
                                      [32m+[0m [0msku        = {
                                          [32m+[0m [0mname = "Standard"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/publicIPAddresses"
                                      [32m+[0m [0mzones      = "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), createArray())]"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-05-01-preview"
                                      [32m+[0m [0mcondition  = "[not(empty(parameters('workspaceDiagsId')))]"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/azureFirewalls', variables('fw_name'))]",
                                        ]
                                      [32m+[0m [0mname       = "fwDiags"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mlogs        = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mcategory        = "AzureFirewallApplicationRule"
                                                  [32m+[0m [0menabled         = true
                                                  [32m+[0m [0mretentionPolicy = {
                                                      [32m+[0m [0mdays    = 10
                                                      [32m+[0m [0menabled = false
                                                    }
                                                },
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mcategory        = "AzureFirewallNetworkRule"
                                                  [32m+[0m [0menabled         = true
                                                  [32m+[0m [0mretentionPolicy = {
                                                      [32m+[0m [0mdays    = 10
                                                      [32m+[0m [0menabled = false
                                                    }
                                                },
                                            ]
                                          [32m+[0m [0mmetrics     = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mcategory        = "AllMetrics"
                                                  [32m+[0m [0menabled         = true
                                                  [32m+[0m [0mretentionPolicy = {
                                                      [32m+[0m [0mdays    = 0
                                                      [32m+[0m [0menabled = false
                                                    }
                                                },
                                            ]
                                          [32m+[0m [0mworkspaceId = "[parameters('workspaceDiagsId')]"
                                        }
                                      [32m+[0m [0mscope      = "[format('Microsoft.Network/azureFirewalls/{0}', variables('fw_name'))]"
                                      [32m+[0m [0mtype       = "Microsoft.Insights/diagnosticSettings"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-03-01"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/publicIPAddresses', variables('firewallPublicIpName'))]",
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/firewallPolicies', format('afwp-{0}', parameters('resourceName')))]",
                                        ]
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[variables('fw_name')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mapplicationRuleCollections = []
                                          [32m+[0m [0mfirewallPolicy             = {
                                              [32m+[0m [0mid = "[resourceId('Microsoft.Network/firewallPolicies', format('afwp-{0}', parameters('resourceName')))]"
                                            }
                                          [32m+[0m [0mipConfigurations           = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0mname       = "IpConf1"
                                                  [32m+[0m [0mproperties = {
                                                      [32m+[0m [0mpublicIPAddress = {
                                                          [32m+[0m [0mid = "[resourceId('Microsoft.Network/publicIPAddresses', variables('firewallPublicIpName'))]"
                                                        }
                                                      [32m+[0m [0msubnet          = {
                                                          [32m+[0m [0mid = "[parameters('fwSubnetId')]"
                                                        }
                                                    }
                                                },
                                            ]
                                          [32m+[0m [0mnetworkRuleCollections     = []
                                          [32m+[0m [0mthreatIntelMode            = "Alert"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/azureFirewalls"
                                      [32m+[0m [0mzones      = "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), createArray())]"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                      [32m+[0m [0mlocation   = "[parameters('location')]"
                                      [32m+[0m [0mname       = "[format('afwp-{0}', parameters('resourceName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0msku                  = {
                                              [32m+[0m [0mtier = "Standard"
                                            }
                                          [32m+[0m [0mthreatIntelMode      = "Alert"
                                          [32m+[0m [0mthreatIntelWhitelist = {
                                              [32m+[0m [0mfqdns       = []
                                              [32m+[0m [0mipAddresses = []
                                            }
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/firewallPolicies"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2020-11-01"
                                      [32m+[0m [0mdependsOn  = [
                                          [32m+[0m [0m"[resourceId('Microsoft.Network/firewallPolicies', format('afwp-{0}', parameters('resourceName')))]",
                                        ]
                                      [32m+[0m [0mname       = "[format('{0}/{1}', format('afwp-{0}', parameters('resourceName')), 'AKSConstructionRuleGroup')]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mpriority        = 200
                                          [32m+[0m [0mruleCollections = [
                                              [32m+[0m [0m{
                                                  [32m+[0m [0maction             = {
                                                      [32m+[0m [0mtype = "Allow"
                                                    }
                                                  [32m+[0m [0mname               = "CoreAksNetEgress"
                                                  [32m+[0m [0mpriority           = 100
                                                  [32m+[0m [0mruleCollectionType = "FirewallPolicyFilterRuleCollection"
                                                  [32m+[0m [0mrules              = "[concat(createArray(createObject('name', 'ControlPlaneTCP', 'ruleType', 'NetworkRule', 'ipProtocols', createArray('TCP'), 'sourceAddresses', createArray(parameters('vnetAksSubnetAddressPrefix')), 'destinationAddresses', createArray(format('AzureCloud.{0}', parameters('location'))), 'destinationPorts', createArray('9000', '22')), createObject('name', 'ControlPlaneUDP', 'ruleType', 'NetworkRule', 'ipProtocols', createArray('UDP'), 'sourceAddresses', createArray(parameters('vnetAksSubnetAddressPrefix')), 'destinationAddresses', createArray(format('AzureCloud.{0}', parameters('location'))), 'destinationPorts', createArray('1194')), createObject('name', 'AzureMonitorForContainers', 'ruleType', 'NetworkRule', 'ipProtocols', createArray('TCP'), 'sourceAddresses', createArray(parameters('vnetAksSubnetAddressPrefix')), 'destinationAddresses', createArray('AzureMonitor'), 'destinationPorts', createArray('443'))), if(parameters('acrPrivatePool'), createArray(createObject('name', 'acr-agentpool', 'ruleType', 'NetworkRule', 'ipProtocols', createArray('TCP'), 'sourceAddresses', createArray(parameters('acrAgentPoolSubnetAddressPrefix')), 'destinationAddresses', createArray('AzureKeyVault', 'Storage', 'EventHub', 'AzureActiveDirectory', 'AzureMonitor'), 'destinationPorts', createArray('443'))), createArray()))]"
                                                },
                                              [32m+[0m [0m{
                                                  [32m+[0m [0maction             = {
                                                      [32m+[0m [0mtype = "Allow"
                                                    }
                                                  [32m+[0m [0mname               = "CoreAksHttpEgress"
                                                  [32m+[0m [0mpriority           = 400
                                                  [32m+[0m [0mruleCollectionType = "FirewallPolicyFilterRuleCollection"
                                                  [32m+[0m [0mrules              = "[concat(createArray(createObject('name', 'aks', 'ruleType', 'ApplicationRule', 'protocols', createArray(createObject('port', 443, 'protocolType', 'Https'), createObject('port', 80, 'protocolType', 'Http')), 'targetFqdns', createArray(), 'fqdnTags', createArray('AzureKubernetesService'), 'sourceAddresses', createArray(parameters('vnetAksSubnetAddressPrefix')))), if(parameters('certManagerFW'), createArray(createObject('name', 'certman-quay', 'ruleType', 'ApplicationRule', 'protocols', createArray(createObject('port', 443, 'protocolType', 'Https'), createObject('port', 80, 'protocolType', 'Http')), 'targetFqdns', createArray('quay.io', '*.quay.io'), 'sourceAddresses', createArray(parameters('vnetAksSubnetAddressPrefix'))), createObject('name', 'certman-letsencrypt', 'ruleType', 'ApplicationRule', 'protocols', createArray(createObject('port', 443, 'protocolType', 'Https'), createObject('port', 80, 'protocolType', 'Http')), 'targetFqdns', createArray('letsencrypt.org', '*.letsencrypt.org'), 'sourceAddresses', createArray(parameters('vnetAksSubnetAddressPrefix')))), createArray()), if(and(parameters('certManagerFW'), not(empty(parameters('appDnsZoneName')))), createArray(createObject('name', 'certman-appDnsZoneName', 'ruleType', 'ApplicationRule', 'protocols', createArray(createObject('port', 443, 'protocolType', 'Https'), createObject('port', 80, 'protocolType', 'Http')), 'targetFqdns', createArray(parameters('appDnsZoneName'), format('*.{0}', parameters('appDnsZoneName'))), 'sourceAddresses', createArray(parameters('vnetAksSubnetAddressPrefix')))), createArray()))]"
                                                },
                                            ]
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Network/firewallPolicies/ruleCollectionGroups"
                                    },
                                ]
                              [32m+[0m [0mvariables      = {
                                  [32m+[0m [0mfirewallPublicIpName = "[format('pip-afw-{0}', parameters('resourceName'))]"
                                  [32m+[0m [0mfw_name              = "[format('afw-{0}', parameters('resourceName'))]"
                                }
                            }
                        }
                      [32m+[0m [0mtype       = "Microsoft.Resources/deployments"
                    },
                  [32m+[0m [0m{
                      [32m+[0m [0mapiVersion = "2020-10-01"
                      [32m+[0m [0mcondition  = "[variables('createLaw')]"
                      [32m+[0m [0mdependsOn  = [
                          [32m+[0m [0m"[resourceId('Microsoft.ContainerService/managedClusters', format('aks-{0}', parameters('resourceName')))]",
                          [32m+[0m [0m"[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]",
                        ]
                      [32m+[0m [0mname       = "aksmetricalerts"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mexpressionEvaluationOptions = {
                              [32m+[0m [0mscope = "inner"
                            }
                          [32m+[0m [0mmode                        = "Incremental"
                          [32m+[0m [0mparameters                  = {
                              [32m+[0m [0malertSeverity                 = {
                                  [32m+[0m [0mvalue = "Informational"
                                }
                              [32m+[0m [0mclusterName                   = {
                                  [32m+[0m [0mvalue = "[format('aks-{0}', parameters('resourceName'))]"
                                }
                              [32m+[0m [0mevalFrequency                 = {
                                  [32m+[0m [0mvalue = "[variables('AlertFrequency').evalFrequency]"
                                }
                              [32m+[0m [0mlogAnalyticsWorkspaceLocation = {
                                  [32m+[0m [0mvalue = "[parameters('location')]"
                                }
                              [32m+[0m [0mlogAnalyticsWorkspaceName     = {
                                  [32m+[0m [0mvalue = "[variables('aks_law_name')]"
                                }
                              [32m+[0m [0mmetricAlertsEnabled           = {
                                  [32m+[0m [0mvalue = "[parameters('createAksMetricAlerts')]"
                                }
                              [32m+[0m [0mwindowSize                    = {
                                  [32m+[0m [0mvalue = "[variables('AlertFrequency').windowSize]"
                                }
                            }
                          [32m+[0m [0mtemplate                    = {
                              [32m+[0m [0m"$schema"      = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
                              [32m+[0m [0mcontentVersion = "1.0.0.0"
                              [32m+[0m [0mmetadata       = {
                                  [32m+[0m [0m_generator = {
                                      [32m+[0m [0mname         = "bicep"
                                      [32m+[0m [0mtemplateHash = "1089613401248897696"
                                      [32m+[0m [0mversion      = "0.6.18.56646"
                                    }
                                }
                              [32m+[0m [0mparameters     = {
                                  [32m+[0m [0malertSeverity                 = {
                                      [32m+[0m [0mallowedValues = [
                                          [32m+[0m [0m"Critical",
                                          [32m+[0m [0m"Error",
                                          [32m+[0m [0m"Warning",
                                          [32m+[0m [0m"Informational",
                                          [32m+[0m [0m"Verbose",
                                        ]
                                      [32m+[0m [0mdefaultValue  = "Informational"
                                      [32m+[0m [0mtype          = "string"
                                    }
                                  [32m+[0m [0mclusterName                   = {
                                      [32m+[0m [0mmetadata = {
                                          [32m+[0m [0mdescription = "The name of the AKS Cluster to configure the alerts on"
                                        }
                                      [32m+[0m [0mtype     = "string"
                                    }
                                  [32m+[0m [0mevalFrequency                 = {
                                      [32m+[0m [0mallowedValues = [
                                          [32m+[0m [0m"PT1M",
                                          [32m+[0m [0m"PT15M",
                                        ]
                                      [32m+[0m [0mdefaultValue  = "PT1M"
                                      [32m+[0m [0mmetadata      = {
                                          [32m+[0m [0mdescription = "Select the frequency on how often the alert rule should be run. Selecting frequency smaller than granularity of datapoints grouping will result in sliding window evaluation"
                                        }
                                      [32m+[0m [0mtype          = "string"
                                    }
                                  [32m+[0m [0mlogAnalyticsWorkspaceLocation = {
                                      [32m+[0m [0mdefaultValue = "[resourceGroup().location]"
                                      [32m+[0m [0mmetadata     = {
                                          [32m+[0m [0mdescription = "The location of the Log Analytics workspace"
                                        }
                                      [32m+[0m [0mtype         = "string"
                                    }
                                  [32m+[0m [0mlogAnalyticsWorkspaceName     = {
                                      [32m+[0m [0mmetadata = {
                                          [32m+[0m [0mdescription = "The name of the Log Analytics workspace to log metric data to"
                                        }
                                      [32m+[0m [0mtype     = "string"
                                    }
                                  [32m+[0m [0mmetricAlertsEnabled           = {
                                      [32m+[0m [0mdefaultValue = true
                                      [32m+[0m [0mmetadata     = {
                                          [32m+[0m [0mdescription = "Create the metric alerts as either enabled or disabled"
                                        }
                                      [32m+[0m [0mtype         = "bool"
                                    }
                                  [32m+[0m [0mwindowSize                    = {
                                      [32m+[0m [0mallowedValues = [
                                          [32m+[0m [0m"PT5M",
                                          [32m+[0m [0m"PT1H",
                                        ]
                                      [32m+[0m [0mdefaultValue  = "PT5M"
                                      [32m+[0m [0mmetadata      = {
                                          [32m+[0m [0mdescription = "Defines the interval over which datapoints are grouped using the aggregation type function"
                                        }
                                      [32m+[0m [0mtype          = "string"
                                    }
                                }
                              [32m+[0m [0mresources      = [
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Node CPU utilization high for {0} CI-1', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "host"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "cpuUsagePercentage"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/nodes"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 80
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "Node CPU utilization across the cluster."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Node working set memory utilization high for {0} CI-2', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "host"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "memoryWorkingSetPercentage"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/nodes"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 80
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "Node working set memory utilization across the cluster."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Jobs completed more than 6 hours ago for {0} CI-11', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "controllerName"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "kubernetes namespace"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "completedJobsCount"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/pods"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 0
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors completed jobs (more than 6 hours ago)."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Container CPU usage high for {0} CI-9', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "controllerName"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "kubernetes namespace"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "cpuExceededPercentage"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/containers"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 90
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors container CPU utilization."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Container working set memory usage high for {0} CI-10', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "controllerName"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "kubernetes namespace"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "memoryWorkingSetExceededPercentage"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/containers"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 90
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors container working set memory utilization."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Pods in failed state for {0} CI-4', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "phase"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"Failed",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "podCount"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/pods"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 0
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "Pod status monitoring."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Disk usage high for {0} CI-5', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "host"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "device"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "DiskUsedPercentage"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/nodes"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 80
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors disk usage for all nodes and storage devices."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Nodes in not ready status for {0} CI-3', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "status"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"NotReady",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "nodesCount"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/nodes"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 0
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "Node status monitoring."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Containers getting OOM killed for {0} CI-6', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "kubernetes namespace"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "controllerName"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "oomKilledContainerCount"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/pods"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 0
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors number of containers killed due to out of memory (OOM) error."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Persistent volume usage high for {0} CI-18', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "podName"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "kubernetesNamespace"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "pvUsageExceededPercentage"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/persistentvolumes"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 80
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors persistent volume utilization."
                                          [32m+[0m [0menabled             = false
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Pods not in ready state for {0} CI-8', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "controllerName"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "kubernetes namespace"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "PodReadyPercentage"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/pods"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "LessThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 80
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors for excessive pods not in the ready state."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "microsoft.containerservice/managedclusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Restarting container count for {0} CI-7', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "kubernetes namespace"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "controllerName"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "restartingContainerCount"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/pods"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 0
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors number of containers restarting across the cluster."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mtargetResourceType  = "Microsoft.ContainerService/managedClusters"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Container CPU usage violates the configured threshold for {0} CI-19', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "controllerName"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "kubernetes namespace"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "cpuThresholdViolated"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/containers"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 0
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors container CPU usage. It uses the threshold defined in the config map."
                                          [32m+[0m [0menabled             = true
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('Container working set memory usage violates the configured threshold for {0} CI-20', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "controllerName"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "kubernetes namespace"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "memoryWorkingSetThresholdViolated"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/containers"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 0
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors container working set memory usage. It uses the threshold defined in the config map."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2018-03-01"
                                      [32m+[0m [0mlocation   = "global"
                                      [32m+[0m [0mname       = "[format('PV usage violates the configured threshold for {0} CI-21', parameters('clusterName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf        = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mcriterionType        = "StaticThresholdCriterion"
                                                      [32m+[0m [0mdimensions           = [
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "podName"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                          [32m+[0m [0m{
                                                              [32m+[0m [0mname     = "kubernetesNamespace"
                                                              [32m+[0m [0moperator = "Include"
                                                              [32m+[0m [0mvalues   = [
                                                                  [32m+[0m [0m"*",
                                                                ]
                                                            },
                                                        ]
                                                      [32m+[0m [0mmetricName           = "pvUsageThresholdViolated"
                                                      [32m+[0m [0mmetricNamespace      = "Insights.Container/persistentvolumes"
                                                      [32m+[0m [0mname                 = "Metric1"
                                                      [32m+[0m [0moperator             = "GreaterThan"
                                                      [32m+[0m [0mskipMetricValidation = true
                                                      [32m+[0m [0mthreshold            = 0
                                                      [32m+[0m [0mtimeAggregation      = "Average"
                                                    },
                                                ]
                                              [32m+[0m [0m"odata.type" = "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors PV usage. It uses the threshold defined in the config map."
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[variables('AksResourceId')]",
                                            ]
                                          [32m+[0m [0mseverity            = "[variables('alertSeverityNumber')]"
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/metricAlerts"
                                    },
                                  [32m+[0m [0m{
                                      [32m+[0m [0mapiVersion = "2021-02-01-preview"
                                      [32m+[0m [0mlocation   = "[parameters('logAnalyticsWorkspaceLocation')]"
                                      [32m+[0m [0mname       = "[format('Daily data cap breached for workspace {0} CIQ-1', parameters('logAnalyticsWorkspaceName'))]"
                                      [32m+[0m [0mproperties = {
                                          [32m+[0m [0mautoMitigate        = false
                                          [32m+[0m [0mcriteria            = {
                                              [32m+[0m [0mallOf = [
                                                  [32m+[0m [0m{
                                                      [32m+[0m [0mfailingPeriods  = {
                                                          [32m+[0m [0mminFailingPeriodsToAlert  = 1
                                                          [32m+[0m [0mnumberOfEvaluationPeriods = 1
                                                        }
                                                      [32m+[0m [0moperator        = "GreaterThan"
                                                      [32m+[0m [0mquery           = "_LogOperation | where Operation == \"Data collection Status\" | where Detail contains \"OverQuota\""
                                                      [32m+[0m [0mthreshold       = 0
                                                      [32m+[0m [0mtimeAggregation = "Count"
                                                    },
                                                ]
                                            }
                                          [32m+[0m [0mdescription         = "This alert monitors daily data cap defined on a workspace and fires when the daily data cap is breached."
                                          [32m+[0m [0mdisplayName         = "[format('Daily data cap breached for workspace {0} CIQ-1', parameters('logAnalyticsWorkspaceName'))]"
                                          [32m+[0m [0menabled             = "[parameters('metricAlertsEnabled')]"
                                          [32m+[0m [0mevaluationFrequency = "[parameters('evalFrequency')]"
                                          [32m+[0m [0mmuteActionsDuration = "P1D"
                                          [32m+[0m [0mscopes              = [
                                              [32m+[0m [0m"[resourceId('microsoft.operationalinsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                                            ]
                                          [32m+[0m [0mseverity            = 1
                                          [32m+[0m [0mwindowSize          = "[parameters('windowSize')]"
                                        }
                                      [32m+[0m [0mtype       = "Microsoft.Insights/scheduledQueryRules"
                                    },
                                ]
                              [32m+[0m [0mvariables      = {
                                  [32m+[0m [0mAksResourceId        = "[resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))]"
                                  [32m+[0m [0malertServerityLookup = {
                                      [32m+[0m [0mCritical      = 0
                                      [32m+[0m [0mError         = 1
                                      [32m+[0m [0mInformational = 3
                                      [32m+[0m [0mVerbose       = 4
                                      [32m+[0m [0mWarning       = 2
                                    }
                                  [32m+[0m [0malertSeverityNumber  = "[variables('alertServerityLookup')[parameters('alertSeverity')]]"
                                }
                            }
                        }
                      [32m+[0m [0mtype       = "Microsoft.Resources/deployments"
                    },
                ]
              [32m+[0m [0mvariables      = {
                  [32m+[0m [0mAcrPullRole                    = "[resourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
                  [32m+[0m [0mAcrPushRole                    = "[resourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]"
                  [32m+[0m [0mAlertFrequency                 = "[variables('AlertFrequencyLookup')[parameters('AksMetricAlertMetricFrequencyModel')]]"
                  [32m+[0m [0mAlertFrequencyLookup           = {
                      [32m+[0m [0mLong  = {
                          [32m+[0m [0mevalFrequency = "PT15M"
                          [32m+[0m [0mwindowSize    = "PT1H"
                        }
                      [32m+[0m [0mShort = {
                          [32m+[0m [0mevalFrequency = "PT1M"
                          [32m+[0m [0mwindowSize    = "PT5M"
                        }
                    }
                  [32m+[0m [0mDEPLOY_APPGW_ADDON             = "[and(parameters('ingressApplicationGateway'), empty(parameters('byoAGWSubnetId')))]"
                  [32m+[0m [0mMonitoringMetricsPublisherRole = "[resourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]"
                  [32m+[0m [0macrContentTrustEnabled         = "[if(and(parameters('enableACRTrustPolicy'), equals(parameters('registries_sku'), 'Premium')), 'enabled', 'disabled')]"
                  [32m+[0m [0macrName                        = "[format('cr{0}{1}', replace(parameters('resourceName'), '-', ''), uniqueString(resourceGroup().id, parameters('resourceName')))]"
                  [32m+[0m [0macrZoneRedundancyEnabled       = "[if(and(not(empty(parameters('availabilityZones'))), equals(parameters('registries_sku'), 'Premium')), 'Enabled', 'Disabled')]"
                  [32m+[0m [0maks_addons                     = {
                      [32m+[0m [0mazureKeyvaultSecretsProvider = {
                          [32m+[0m [0mconfig  = {
                              [32m+[0m [0menableSecretRotation = "false"
                            }
                          [32m+[0m [0menabled = "[parameters('azureKeyvaultSecretsProvider')]"
                        }
                      [32m+[0m [0mazurepolicy                  = {
                          [32m+[0m [0mconfig  = {
                              [32m+[0m [0mversion = "[if(not(empty(parameters('azurepolicy'))), 'v2', json('null'))]"
                            }
                          [32m+[0m [0menabled = "[not(empty(parameters('azurepolicy')))]"
                        }
                      [32m+[0m [0mgitops                       = {
                          [32m+[0m [0menabled = "[not(empty(parameters('gitops')))]"
                        }
                      [32m+[0m [0momsagent                     = {
                          [32m+[0m [0mconfig  = {
                              [32m+[0m [0mlogAnalyticsWorkspaceResourceID = "[if(and(variables('createLaw'), parameters('omsagent')), resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name')), json('null'))]"
                            }
                          [32m+[0m [0menabled = "[and(variables('createLaw'), parameters('omsagent'))]"
                        }
                      [32m+[0m [0mopenServiceMesh              = {
                          [32m+[0m [0mconfig  = {}
                          [32m+[0m [0menabled = "[parameters('openServiceMeshAddon')]"
                        }
                    }
                  [32m+[0m [0maks_addons1                    = "[if(and(variables('DEPLOY_APPGW_ADDON'), parameters('ingressApplicationGateway')), union(variables('aks_addons'), if(variables('deployAppGw'), createObject('ingressApplicationGateway', createObject('config', createObject('applicationGatewayId', resourceId('Microsoft.Network/applicationGateways', variables('appgwName'))), 'enabled', true())), createObject('ingressApplicationGateway', createObject('enabled', true(), 'config', createObject('applicationGatewayName', variables('appgwName'), 'subnetCIDR', '10.2.0.0/16'))))), variables('aks_addons'))]"
                  [32m+[0m [0maks_byo_identity               = "[or(parameters('custom_vnet'), not(empty(parameters('byoAKSSubnetId'))))]"
                  [32m+[0m [0maks_identity                   = {
                      [32m+[0m [0mtype                   = "UserAssigned"
                      [32m+[0m [0muserAssignedIdentities = {
                          [32m+[0m [0m"[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-aks-{0}', parameters('resourceName'))))]" = {}
                        }
                    }
                  [32m+[0m [0maks_law_name                   = "[format('log-{0}', parameters('resourceName'))]"
                  [32m+[0m [0makssku                         = "[if(parameters('AksPaidSkuForSLA'), 'Paid', 'Free')]"
                  [32m+[0m [0makvName                        = "[if(greater(length(variables('akvRawName')), 24), substring(variables('akvRawName'), 0, 24), variables('akvRawName'))]"
                  [32m+[0m [0makvRawName                     = "[format('kv-{0}{1}', replace(parameters('resourceName'), '-', ''), uniqueString(resourceGroup().id, parameters('resourceName')))]"
                  [32m+[0m [0mappGWenableWafFirewall         = "[if(equals(parameters('appGWsku'), 'Standard_v2'), false(), parameters('appGWenableFirewall'))]"
                  [32m+[0m [0mappGWskuObj                    = "[union(createObject('name', parameters('appGWsku'), 'tier', parameters('appGWsku')), if(equals(parameters('appGWmaxCount'), 0), createObject('capacity', parameters('appGWcount')), createObject()))]"
                  [32m+[0m [0mappGwFirewallConfigOwasp       = {
                      [32m+[0m [0mdisabledRuleGroups     = []
                      [32m+[0m [0menabled                = "[variables('appGWenableWafFirewall')]"
                      [32m+[0m [0mfirewallMode           = "[parameters('appGwFirewallMode')]"
                      [32m+[0m [0mmaxRequestBodySizeInKb = 128
                      [32m+[0m [0mrequestBodyCheck       = true
                      [32m+[0m [0mruleSetType            = "OWASP"
                      [32m+[0m [0mruleSetVersion         = "3.2"
                    }
                  [32m+[0m [0mappgwName                      = "[format('agw-{0}', parameters('resourceName'))]"
                  [32m+[0m [0mappgwResourceId                = "[if(variables('deployAppGw'), resourceId('Microsoft.Network/applicationGateways', format('{0}', variables('appgwName'))), '')]"
                  [32m+[0m [0mautoScale                      = "[greater(parameters('agentCountMax'), parameters('agentCount'))]"
                  [32m+[0m [0mazureDefenderSecurityProfile   = {
                      [32m+[0m [0msecurityProfile = {
                          [32m+[0m [0mazureDefender = {
                              [32m+[0m [0menabled                         = true
                              [32m+[0m [0mlogAnalyticsWorkspaceResourceId = "[resourceId('Microsoft.OperationalInsights/workspaces', variables('aks_law_name'))]"
                            }
                        }
                    }
                  [32m+[0m [0mbuildInAKSRBACClusterAdmin     = "[resourceId('Microsoft.Authorization/roleDefinitions', 'b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b')]"
                  [32m+[0m [0mcontributor                    = "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]"
                  [32m+[0m [0mcopy                           = [
                      [32m+[0m [0m{
                          [32m+[0m [0mcount = "[length(parameters('kvIPAllowlist'))]"
                          [32m+[0m [0minput = {
                              [32m+[0m [0mvalue = "[parameters('kvIPAllowlist')[copyIndex('kvIPRules')]]"
                            }
                          [32m+[0m [0mname  = "kvIPRules"
                        },
                    ]
                  [32m+[0m [0mcreateLaw                      = "[or(or(parameters('omsagent'), variables('deployAppGw')), parameters('azureFirewalls'))]"
                  [32m+[0m [0mdeployAppGw                    = "[and(parameters('ingressApplicationGateway'), or(parameters('custom_vnet'), not(empty(parameters('byoAGWSubnetId')))))]"
                  [32m+[0m [0mdnsZoneName                    = "[if(not(empty(parameters('dnsZoneId'))), split(parameters('dnsZoneId'), '/')[8], '')]"
                  [32m+[0m [0mdnsZoneRg                      = "[if(not(empty(parameters('dnsZoneId'))), split(parameters('dnsZoneId'), '/')[4], '')]"
                  [32m+[0m [0mexistingAGWSubnetName          = "[if(not(empty(parameters('byoAGWSubnetId'))), if(greater(length(split(parameters('byoAGWSubnetId'), '/')), 10), split(parameters('byoAGWSubnetId'), '/')[10], ''), '')]"
                  [32m+[0m [0mexistingAGWVnetName            = "[if(not(empty(parameters('byoAGWSubnetId'))), if(greater(length(split(parameters('byoAGWSubnetId'), '/')), 9), split(parameters('byoAGWSubnetId'), '/')[8], ''), '')]"
                  [32m+[0m [0mexistingAGWVnetRG              = "[if(not(empty(parameters('byoAGWSubnetId'))), if(greater(length(split(parameters('byoAGWSubnetId'), '/')), 9), split(parameters('byoAGWSubnetId'), '/')[4], ''), '')]"
                  [32m+[0m [0mexistingAksVnetRG              = "[if(not(empty(parameters('byoAKSSubnetId'))), if(greater(length(split(parameters('byoAKSSubnetId'), '/')), 4), split(parameters('byoAKSSubnetId'), '/')[4], ''), '')]"
                  [32m+[0m [0mfrontendPublicIpConfig         = {
                      [32m+[0m [0mname       = "appGatewayFrontendIP"
                      [32m+[0m [0mproperties = {
                          [32m+[0m [0mpublicIPAddress = {
                              [32m+[0m [0mid = "[resourceId('Microsoft.Network/publicIPAddresses', format('pip-agw-{0}', parameters('resourceName')))]"
                            }
                        }
                    }
                  [32m+[0m [0misPrivate                      = "[if(not(empty(parameters('dnsZoneId'))), equals(split(parameters('dnsZoneId'), '/')[7], 'privateDnsZones'), false())]"
                  [32m+[0m [0mkeyVaultCertsOfficerRole       = "[resourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]"
                  [32m+[0m [0mkeyVaultSecretsOfficerRole     = "[resourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]"
                  [32m+[0m [0mkeyVaultSecretsUserRole        = "[resourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]"
                  [32m+[0m [0mmanagedIdentityOperator        = "[resourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]"
                  [32m+[0m [0mpolicySetBaseline              = "/providers/Microsoft.Authorization/policySetDefinitions/a8640138-9b0a-4a28-b8cb-1666c838647d"
                  [32m+[0m [0mpolicySetRestrictive           = "/providers/Microsoft.Authorization/policySetDefinitions/42b8ef37-b724-4e24-bbc8-7a7708edfe00"
                  [32m+[0m [0mreader                         = "[resourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                  [32m+[0m [0msystemPoolPresets              = {
                      [32m+[0m [0mCost-Optimised = {
                          [32m+[0m [0mavailabilityZones = []
                          [32m+[0m [0mcount             = 1
                          [32m+[0m [0menableAutoScaling = true
                          [32m+[0m [0mmaxCount          = 3
                          [32m+[0m [0mminCount          = 1
                          [32m+[0m [0mvmSize            = "Standard_B4ms"
                        }
                      [32m+[0m [0mHighSpec       = {
                          [32m+[0m [0mavailabilityZones = [
                              [32m+[0m [0m"1",
                              [32m+[0m [0m"2",
                              [32m+[0m [0m"3",
                            ]
                          [32m+[0m [0mcount             = 3
                          [32m+[0m [0menableAutoScaling = true
                          [32m+[0m [0mmaxCount          = 5
                          [32m+[0m [0mminCount          = 3
                          [32m+[0m [0mvmSize            = "Standard_D4s_v3"
                        }
                      [32m+[0m [0mStandard       = {
                          [32m+[0m [0mavailabilityZones = [
                              [32m+[0m [0m"1",
                              [32m+[0m [0m"2",
                              [32m+[0m [0m"3",
                            ]
                          [32m+[0m [0mcount             = 3
                          [32m+[0m [0menableAutoScaling = true
                          [32m+[0m [0mmaxCount          = 5
                          [32m+[0m [0mminCount          = 3
                          [32m+[0m [0mvmSize            = "Standard_DS2_v2"
                        }
                    }
                  [32m+[0m [0muserPoolVmProfile              = {
                      [32m+[0m [0mavailabilityZones = "[if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), null())]"
                      [32m+[0m [0mcount             = "[parameters('agentCount')]"
                      [32m+[0m [0menableAutoScaling = "[variables('autoScale')]"
                      [32m+[0m [0mmaxCount          = "[if(variables('autoScale'), parameters('agentCountMax'), json('null'))]"
                      [32m+[0m [0mminCount          = "[if(variables('autoScale'), parameters('agentCount'), json('null'))]"
                      [32m+[0m [0mvmSize            = "[parameters('agentVMSize')]"
                    }
                }
            }
        )
    }

[0m[1mPlan:[0m 1 to add, 0 to change, 0 to destroy.
[0m[0m
[1mChanges to Outputs:[0m[0m
  [32m+[0m [0m[1m[0maksClusterName[0m[0m = (known after apply)
[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mContent-Type is not recognized as a text type, got "application/octet-stream"[0m
[33m│[0m [0m
[33m│[0m [0m[0m  with data.http.aksc_release,
[33m│[0m [0m  on main.tf line 3, in data "http" "aksc_release":
[33m│[0m [0m   3: data "http" "aksc_release" [4m{[0m[0m
[33m│[0m [0m
[33m│[0m [0mIf the content is binary data, Terraform may not properly handle the contents of the
[33m│[0m [0mresponse.
[33m╵[0m[0m
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Saved the plan to: main.tfplan

To perform exactly these actions, run the following command to apply:
    terraform apply "main.tfplan"
